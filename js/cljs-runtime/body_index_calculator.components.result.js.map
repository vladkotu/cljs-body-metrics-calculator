{"version":3,"sources":["body_index_calculator/components/result.cljs"],"mappings":"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","names":["body-index-calculator.components.result/cell","child","js/module$node_modules$$material_ui$core$TableCell$index.default","body-index-calculator.components.result/result-table","res","G__69650","re-frame.core/subscribe","js/module$node_modules$$material_ui$core$Table$index.default","js/module$node_modules$$material_ui$core$TableHead$index.default","js/module$node_modules$$material_ui$core$TableRow$index.default","js/module$node_modules$$material_ui$core$TableBody$index.default","iter__4523__auto__","s__69656","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","cljs.core/count","b__69658","cljs.core/chunk-buffer","i__69657","map__69664","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__69655","cljs.core/chunk-rest","map__69669","cljs.core/first","cljs.core/cons","cljs.core/rest","cljs.core/deref","abbr","raw-value?","title","units","value","conclusion","body_index_calculator.helpers.react_key.cljs$core$IFn$_invoke$arity$variadic","body_index_calculator.helpers.as_float.cljs$core$IFn$_invoke$arity$2","body-index-calculator.helpers/as-int","cljs.core/chunk-first"],"sourcesContent":["(ns body-index-calculator.components.result\n  (:require\n   [re-frame.core :as rf]\n   [body-index-calculator.subscriptions :as s]\n   [body-index-calculator.helpers :refer [react-key as-int as-float]]\n   [\"@material-ui/core/Table\" :default Table]\n   [\"@material-ui/core/TableBody\" :default TableBody]\n   [\"@material-ui/core/TableCell\" :default TableCell]\n   [\"@material-ui/core/TableHead\" :default TableHead]\n   [\"@material-ui/core/TableRow\" :default TableRow]))\n\n(defn cell [child]\n  [:> TableCell {:align \"right\"} child])\n\n(defn result-table []\n  (let [res (rf/subscribe [::s/result])]\n    (fn []\n      [:> Table\n       [:> TableHead\n        [:> TableRow\n         [cell \"Metric name / Units\"]\n         [cell \"Value\"]\n         [cell \"Conclusion\"]]]\n       [:> TableBody\n        (for [{:keys [abbr raw-value? title units value conclusion]} @res]\n          ^{:key (react-key \"table-row\" title)}\n          [:> TableRow\n           [cell [:span title \" (\" abbr  \") \" \"/ \" units]]\n           [cell [:span (if raw-value? (as-float value 4) (as-int value))]]\n           [cell [:strong conclusion]]])]])))\n"]}