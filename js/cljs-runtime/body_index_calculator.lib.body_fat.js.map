{"version":3,"sources":["body_index_calculator/lib/body_fat.cljs"],"mappings":";;;;;;AAOA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAgB,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAAA;AAAA,AAAA,AAAAE,AAAAF,AAAA;AAAA,AAAAA;AAAA,AAAA,AAAAE,AAAAF,AAAA;AAAA,AAAAA;AAAA,AAAA,AAAAE,AAAAF,AAAA;AAAA,AAAAA;AAAA,AAAA,AAAAE,AAAAF,AAAA;AAAA,AAAAA;AAAA,AAAA,AAAA,AAAAC,AAAAD,AAAA,AAAAE,AAAAF,AAAA,AAAA,AAAAE,AAAAF,AAAA,AAAA,AAAAE,AAAAF,AAAA,AAAA,AAAAE,AAAAF,AAAA;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAKhB;;;AAAA,AAAMG,AAEHC;AAFH,AAGE,AAAMM,AAAI,AAACC,AAAqBP;AAAhCC,AAC2BD;AAD3BC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AACcO;AADd,AAAAH,AAAAJ,AAAA,AACkBQ;AACZC,AAAI,AAAA,AAAA,AAAI,AAAA,AAAOD;AAFrB,AAGE,AAAA,AAAG,AAAG,AAAG,AAAA,AAAQH,AACR,AAAA,AAAQE,AACX,AAAA,AAASE;;AAGnB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC;AAcL,AAAA,AAAMC,AACHZ;AADH,AAEOA,AACAD,AAEA,AAAAe,AAAA,AAAAC,AAAA;AADAF,AACA,AAAA,AAAAE;;AAAAC,AAAA;AAAAC;AAAA,AAAE,AAAAA,AAACC,AACA,AAACb,AAAIM,AAAsB,AAAA,AAASX;;;AADvC,AAAA,AAAAgB,AAAAF","names":["cljs.spec.alpha/def-impl","cljs.spec.alpha/map-spec-impl","G__68431","cljs.core/map?","cljs.core/contains?","body-index-calculator.lib.body-fat/calc-body-fat","person","map__68440","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","bfp","body-index-calculator.lib.body-mass-index/calc-body-mass-index","age","gender","sex","body-index-calculator.lib.body-fat/body-fat-ranges-table","body-index-calculator.lib.body-fat/classify-fat-percentage-person","Math/round","G__68445","G__68446","fexpr__68444","p1__68443#","body-index-calculator.lib.lib/classify-value-by-table-ranges"],"sourcesContent":["(ns body-index-calculator.lib.body-fat\n  (:require\n   [cljs.spec.alpha :as s]\n   [body-index-calculator.lib.specs :as specs]\n   [body-index-calculator.lib.lib :as lib]\n   [body-index-calculator.lib.body-mass-index  :refer [calc-body-mass-index]]))\n\n(s/def ::person (s/keys :req-un [::specs/height\n                                 ::specs/weight\n                                 ::specs/age\n                                 ::specs/gender]))\n\n(defn calc-body-fat\n  \"Calculate body fat bass based on https://en.wikipedia.org/wiki/Body_fat_percentage\"\n  [person]\n  (let [bfp (calc-body-mass-index person)\n        {:keys [age gender]} person\n        sex (if (:male gender) 1 0)]\n    (- (- (+ (* 1.39 bfp)\n             (* 0.16 age))\n          (* 10.34 sex))\n       9)))\n\n(def body-fat-ranges-table\n  {:female\n   [[10   13   \"Essintial fat\"]\n    [14   20   \"Athletes Level\"]\n    [21   25   \"Fitness Person\"]\n    [26   31   \"Average Level\"]\n    [32   100  \"Obese\"]]\n   :male\n   [[3    5    \"Essintial fat\"]\n    [6    13   \"Athletes Level\"]\n    [14   17   \"Fitness Person\"]\n    [18   24   \"Average Level\"]\n    [25   100  \"Obese\"]]})\n\n(defn classify-fat-percentage-person\n  [person]\n  (->> person\n       calc-body-fat\n       Math/round\n       (#(lib/classify-value-by-table-ranges\n          (get body-fat-ranges-table (:gender person))\n          %))))\n"]}