{"version":3,"sources":["taoensso/tempura.cljc"],"mappings":"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","names":["taoensso.encore/assert-min-encore-version","taoensso.tempura/*tr-opts*","taoensso.tempura/*tr-scope*","taoensso.tempura/get-default-resource-compiler","taoensso.encore/memoize_","p__68888","map__68889","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","escape-html?","esc1","taoensso.tempura.impl/escape-html","cljs.core/identity","esc2","taoensso.tempura.impl/vec-escape-html-in-strs","res","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","cljs.core/fn?","taoensso.tempura.impl.str__GT_vargs_fn.cljs$core$IFn$_invoke$arity$1","cljs.core/vector?","G__68891","taoensso.tempura.impl/vec->vtag","taoensso.tempura.impl.vec_explode_styles_in_strs.cljs$core$IFn$_invoke$arity$1","taoensso.tempura.impl/vec-explode-args-in-strs","taoensso.tempura.impl.vec__GT_vargs_fn.cljs$core$IFn$_invoke$arity$1","taoensso.tempura/default-tr-opts","G__68895","taoensso.tempura/example-dictionary","p__68898","vec__68900","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","arg1","arg2","taoensso.tempura/merge-into-default-opts","opts","dynamic-opts","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","taoensso.tempura/scoped","locale","?scope","resid","taoensso.encore.merge_keywords.cljs$core$IFn$_invoke$arity$1","taoensso.tempura/search-resids*","dict","locale-splits","resids","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","acc","locale-split","lvar","temp__5735__auto__","cljs.core/reduced","taoensso.tempura/search-resids*-cached","taoensso.tempura/search-resids","cache?","merge-into-default-opts","scoped","search-resids*","search-resids*-cached","search-resids","var_args","G__68914","taoensso.tempura/tr","js/Error","locales","resource-ids","taoensso.tempura.tr.cljs$core$IFn$_invoke$arity$4","resource-args","e","taoensso.truss.impl/-dummy-error","e68915","taoensso.truss.impl/-invar-violation!","cljs.core/seq","map__68916","default-locale","scope-fn","cache-dict?","cache-locales?","cache-resources?","e68918","taoensso.tempura.impl/compile-dictionary","G__68919","G__68920","taoensso.tempura.impl/expand-locales","taoensso.encore.conj_some.cljs$core$IFn$_invoke$arity$2","?fb-resource","last-res","cljs.core/peek","cljs.core/Keyword","cljs.core/pop","resid-scope","temp__5739__auto__","f","?matching-resource","or__4131__auto__","mrf","G__68922","G__68923","G__68924","G__68925","G__68926","G__68927","r","resource-compiler","vargs","temp__5737__auto__","args","taoensso.tempura.impl/vargs","fexpr__68928"],"sourcesContent":["(ns taoensso.tempura\n  \"Pure Clojure/Script i18n translations library.\"\n  {:author \"Peter Taoussanis (@ptaoussanis)\"}\n  #?(:clj\n     (:require\n      [clojure.string        :as str]\n      [taoensso.encore       :as enc  :refer [have have? qb]]\n      [taoensso.tempura.impl :as impl :refer []]))\n\n  #?(:cljs\n     (:require\n      [clojure.string        :as str]\n      [taoensso.encore       :as enc  :refer-macros [have have?]]\n      [taoensso.tempura.impl :as impl :refer-macros []])))\n\n(enc/assert-min-encore-version [2 86 1])\n\n(def ^:dynamic *tr-opts*  nil)\n(def ^:dynamic *tr-scope* nil)\n\n(defmacro with-tr-opts  [opts  & body] `(binding [*tr-opts*  ~opts]  ~@body))\n(defmacro with-tr-scope\n  \"`(with-tr-scope :foo.bar (tr _ _ [:baz]))` is equivalent to\n   `(tr _ _ [:foo.bar/baz])`\"\n  [scope & body]\n  `(binding [*tr-scope* ~scope] ~@body))\n\n;;;;\n\n(def ^:private get-default-resource-compiler\n  \"Good general-purpose resource compiler.\n  Supports output of text, and Hiccup forms with simple Markdown styles.\"\n  (enc/memoize_\n    (fn [{:keys [escape-html?]}]\n      (let [esc1 (if escape-html? impl/escape-html             identity)\n            esc2 (if escape-html? impl/vec-escape-html-in-strs identity)]\n\n        (enc/memoize_\n          (fn [res] ; -> [(fn [vargs]) -> <compiled-resource>]\n            (enc/cond! ; Nb no keywords, nils, etc.\n              (fn?     res) (-> res) ; Completely arb, full control\n              (string? res) (-> res esc1 impl/str->vargs-fn)\n              (vector? res) (-> res\n                              impl/vec->vtag\n                              impl/vec-explode-styles-in-strs\n                              impl/vec-explode-args-in-strs\n                              esc2       ; Avoid for Reactjs\n                              impl/vec->vargs-fn))))))))\n\n(comment\n  (let [rc (get-default-resource-compiler {})]\n    [((rc  \"Hi %1 :-)\")  [\"Steve\"])\n     ((rc  \"Hi **%1**\")  [\"Steve\"])\n     ((rc [\"Hi **%1**\"]) [\"Steve\"])]))\n\n(def default-tr-opts\n  {:default-locale :en\n   :dict {:en {:missing \"[Missing tr resource]\"}}\n   :scope-fn (fn [] *tr-scope*)\n\n   :cache-dict?      #?(:clj false :cljs true)\n   :cache-locales?   #?(:clj false :cljs true)\n   :cache-resources? false\n\n   :resource-compiler (get-default-resource-compiler {:escape-html? false})\n   :missing-resource-fn nil ; Nb return nnil to use as resource\n   #_(fn [{:keys [opts locales resource-ids resource-args]}]\n       (debugf \"Missing tr resource: %s\" [locales resource-ids])\n       nil)})\n\n(def example-dictionary\n  {:en-GB ; Locale\n   {:missing \":en-GB missing text\" ; Fallback for missing resources\n    :example ; You can nest ids if you like\n    {:greet \"Good day %1!\" ; Note Clojure fn-style %1 args\n     }}\n\n   :en ; A second locale\n   {:missing \":en missing text\"\n    :example\n    {:greet \"Hello %1\"\n     :farewell \"Goodbye %1\"\n     :foo \"foo\"\n     :bar \"bar\"\n     :bar-copy :en.example/bar ; Can alias entries\n     :baz [:div \"This is a **Hiccup** form\"]\n\n     ;; Can use arbitrary fns as resources\n     :qux (fn [[arg1 arg2]] (str arg1 \" and \" arg2))}\n\n    :example-copy :en/example ; Can alias entire subtrees\n\n    :import-example\n    {:__load-resource ; Inline edn content loaded from disk/resource\n     \"resources/i18n.clj\"}}})\n\n(comment ; For README\n  (tr {:dict example-dictionary}\n    [:en] ; Vector of descending-preference locales to search\n    [:example/foo] ; Vector of descending-preference resource-ids to search\n    ) ; => \"foo\"\n\n  (def opts {:dict example-dictionary})\n\n  (tr opts [:en] [:example/invalid :example/bar]) ; => \"bar\"\n  (tr opts [:en] [:example/invalid \"Inline fallback\"]) ; => \"Inline fallback\"\n\n  (tr opts [:en] [:example/greet] [\"Steve\"]) ; => \"Hello Steve\"\n\n  (tr opts [:en] [:example/invalid \"Hi %1\"] [\"Steve\"]) ; => \"Hi Steve\"\n\n  (tr opts [:en] [:example/invalid [:div \"My **fallback** div\"]])\n  ; [:div \"My \" [:strong \"fallback\"] \" div\"]\n\n  (tr [[\"Please enter your **login details** below:\"]]))\n\n;;;;\n\n(def ^:private merge-into-default-opts\n  (enc/memoize_\n    (fn [opts dynamic-opts]\n      (merge default-tr-opts opts dynamic-opts))))\n\n(def ^:private scoped\n  (enc/memoize_\n    (fn [locale ?scope resid]\n      (enc/merge-keywords [locale ?scope resid]))))\n\n(defn- search-resids*\n  \"loc1 res1 var1 var2 ... base\n        res2 var1 var2 ... base\n        ...\n   loc2 res1 var1 var2 ... base\n        res2 var1 var2 ... base\n        ...\"\n  [dict locale-splits ?scope resids]\n  (reduce\n    (fn [acc locale-split]\n      (reduce\n        (fn [acc resid]\n          (reduce\n            (fn [acc lvar]\n              ;; (debugf \"Searching: %s\" (scoped lvar ?scope resid))\n              (when-let [res (get dict (scoped lvar ?scope resid))]\n                (reduced (reduced (reduced #_[res resid] res)))))\n            acc locale-split))\n        acc resids))\n    nil locale-splits))\n\n(def ^:private search-resids*-cached (enc/memoize_ search-resids*))\n\n(defn- search-resids [cache? dict locale-splits ?scope resids]\n  (if cache?\n    (search-resids*-cached dict locale-splits ?scope resids)\n    (search-resids*        dict locale-splits ?scope resids)))\n\n#_\n(defmacro vargs \"Experimental. Compile-time `impl/vargs`.\"\n  [x]\n  (if (map? x)\n    (do\n      (assert (enc/revery? enc/pos-int? (keys x))\n        \"All arg map keys must be +ive non-zero ints\")\n      (impl/vargs x))\n    (have vector? x)))\n\n#_(comment (macroexpand '(vargs {1 (do \"1\") 2 (do \"2\")})))\n\n;;;;\n\n#?(:clj\n   (defn load-resource-at-runtime\n     \"Experimental, subject to change.\n     Reads and returns an edn resource on classpath, at runtime.\n     Supported by: clj only (cljs support not possible).\n\n     A {:my-key {:__load-resource \\\"my-file.edn\\\"}} dictionary entry is\n     equivalent to {:my-key (load-resource-at-runtime \\\"my-file.edn\\\")}.\n\n     See also `load-resource-at-compile-time`.\"\n\n     [rname] (impl/load-resource rname)))\n\n(defmacro load-resource-at-compile-time\n  \"Experimental, subject to change.\n  Reads and inlines an edn resource on classpath, at compile-time.\n  Supported by: both clj and cljs.\n\n  See also `load-resource-at-runtime`.\"\n\n  [rname] (impl/load-resource rname))\n\n(comment (load-resource-at-compile-time \"foo.edn\"))\n\n(let [;;; Local aliases to avoid var deref\n      merge-into-default-opts merge-into-default-opts\n      scoped                  scoped\n      search-resids*          search-resids*\n      search-resids*-cached   search-resids*-cached\n      search-resids           search-resids]\n\n  (defn tr\n    \"Next gen Taoensso (tr)anslation API:\n\n    (tr\n      ;; Opts map to control behaviour:\n      {:default-locale :en\n       :dict ; Resource dictionary\n       {:en {:missing \\\"Missing translation\\\"\n             :example {:greet \\\"Hello %1\\\"\n                       :farewell \\\"Goodbye %1, it was nice to meet you!\\\"}}}}\n\n      ;; Descending-preference locales to try:\n      [:fr-FR :en-GB-variation1]\n\n      ;; Descending-preference dictionary resorces to try. May contain a\n      ;; final non-keyword fallback:\n      [:example/how-are-you? \\\"How are you, %1?\\\"]\n\n      ;; Optional arbitrary args for insertion into compiled resource:\n      [\\\"Steve\\\"])\n\n    => \\\"How are you, Steve?\\\"\n\n\n    Common opts (see `tempura/default-tr-opts` for default vals):\n\n      :default-locale      ; Optional fallback locale to try when given\n                           ; locales don't have the requested resource/s.\n\n      :dict                ; Dictionary map of resources,\n                           ; {<locale> {<k1> ... {<kn> <resource>}}}.\n                           ; See also `tempura/example-dictionary`.\n\n      :resource-compiler   ; (fn [resource]) -> [(fn [vargs]) -> <compiled-resource>].\n                           ; Useful if you want to customize any part of how\n                           ; dictionary resources are compiled.\n\n      :missing-resource-fn ; (fn [{:keys [opts locales resource-ids resource-args]}]).\n                           ; Called when requested resource/s cannot be\n                           ; found. Useful for logging, etc. May return a\n                           ; non-nil fallback resource value.\n\n      :cache-dict?         ; Only reason you'd want this off is if\n                           ; you're using :__load-resource imports and\n                           ; and want dictionary to pick up changes.\n\n      :cache-locales?      ; Client will usu. be dealing with a small\n                           ; number of locales, the server often a\n                           ; large number in the general case. `tr`\n                           ; partials may want to enable cached locale\n                           ; expansion (e.g. in the context of a\n                           ; particular user's Ring request, etc.).\n\n      :cache-resources?    ; For the very highest possible performance\n                           ; when using a limited domain of locales +\n                           ; resource ids.\"\n\n    ([opts locales resource-ids] (tr opts locales resource-ids nil))\n    ([opts locales resource-ids resource-args]\n\n     (have? vector? resource-ids)\n     ;; (have? [:or nil? vector? map?] resource-args)\n\n     (when (seq resource-ids)\n       (let [opts (merge-into-default-opts opts *tr-opts*)\n             {:keys [default-locale dict scope-fn\n                     cache-dict?      #_cache-dict-compilation?\n                     cache-locales?   #_cache-locale-expansion?\n                     cache-resources? #_cache-resource-id-searches?]}\n             opts\n\n             locales       (if (nil? locales) [] (have vector? locales))\n             dict          (impl/compile-dictionary cache-dict? dict)\n             locale-splits (impl/expand-locales cache-locales?\n                             (enc/conj-some locales default-locale))\n\n             ?fb-resource  (let [last-res (peek resource-ids)]\n                             (when-not (keyword? last-res) last-res))\n             resource-ids (if ?fb-resource (pop resource-ids) resource-ids)\n\n             ;; For root scopes, disabling scope, other *vars*, etc.\n             resid-scope (when-some [f scope-fn] (f))\n\n             ?matching-resource\n             (or\n               (when (seq resource-ids) ; *Any* non-fb resource ids?\n                 (search-resids cache-resources?\n                   dict locale-splits resid-scope resource-ids))\n\n               ?fb-resource\n\n               ;; No scope from here:\n\n               (when-let [mrf (get opts :missing-resource-fn)]\n                 (mrf ; Nb can return nnil to use result as resource\n                   {:opts opts :locales locales :resource-ids resource-ids\n                    :resource-args resource-args}))\n\n               (search-resids cache-resources?\n                 dict locale-splits nil [:missing]))]\n\n         (when-let [r ?matching-resource]\n           (let [resource-compiler (get opts :resource-compiler)\n                 vargs (if-some [args resource-args] (impl/vargs args) [])]\n\n             ;; Could also supply matching resid to compiler, but think it'd\n             ;; be better to keep ids single-purpose. Any meta compiler\n             ;; options, notes, etc. should be provided with res content.\n             ((resource-compiler r) vargs))))))))\n\n(comment\n  (tr {} [:en] [:resid1 \"Hello there\"])   ; => text\n  (tr {} [:en] [:resid1 [\"Hello world\"]]) ; => vec (Hiccup, etc.)\n  (tr {} [:en] [:resid2 [\"Hello **world**\"]])\n  (tr {} [:en] [:resid3 [\"Hello \" [:br] [:strong \"world\"]]])\n\n  (def c1\n    {:cache-dict?    false\n     :cache-locales? false\n     :default-local :en\n     :dict example-dictionary})\n\n  (tr {} [:en] [:foo :bar [:span \"This is a **test**\"]])\n  (tr c1 [:en-GB] [:example/greet] [\"Steve\"])\n  (tr c1 [:en] [:example/bar-copy \"Fallback\"])\n  (tr c1 [:en] [:foo :bar])\n  (with-tr-scope :example (tr c1 [:en] [:foo]))\n\n  (qb 1000\n    (tr c1 [:en] [\"Hi %1\"]        [\"Steve\"])\n    (tr c1 [:en] [\"Hi %1\"]        {1 \"Steve\"})\n    (tr c1 [:en] [ \"Hi **%1**!\"]  [\"Steve\"])\n    (tr c1 [:en] [[\"Hi **%1**!\"]] [\"Steve\"])\n    (tr c1 [:en-US] [:foo :bar [\"Hi **%1**!\"]] [\"Steve\"])\n    (tr c1 [:DE-US] [:foo :bar] [\"Steve\"])))\n\n;;;; Ring middleware\n\n#?(:clj\n   (defn parse-http-accept-header\n     \"Parses given HTTP Accept header string and returns ordered vector\n     of choices. No auto normalization. Ref. https://goo.gl/c4ClkR.\"\n     [header]\n     (when header\n       (when-let [csvs (not-empty (str/split header #\",\"))]\n         (let [idx_ (volatile! -1)\n               m-sort-by\n               (reduce\n                 (fn [acc in]\n                   (let [in (str/trim in)]\n                     (if (or (= in \"\") (get acc in))\n                       acc\n                       (let [[choice q] (str/split in #\";\")\n                             choice (str/trim choice)\n                             q (or (when q\n                                     (enc/as-?float\n                                       (get (str/split q #\"=\") 1)))\n                                 1.0)\n                             sort-by [(- q) (vswap! idx_ inc)]]\n                         (assoc acc [choice q] sort-by)))))\n                 {}\n                 csvs)]\n\n           (into [] (map (fn [[choice]] choice))\n             (sort-by m-sort-by (keys m-sort-by))))))))\n\n(comment\n  (mapv parse-http-accept-header\n    [nil \"en-GB\" \"da, en-gb;q=0.8, en;q=0.7\" \"en-GB,en;q=0.8,en-US;q=0.6\"\n     \"en-GB  ,  en; q=0.8, en-US;  q=0.6\" \"a,\" \"es-ES, en-US\"]))\n\n#?(:clj\n   (defn wrap-ring-request\n     \"Alpha, subject to change.\n     Wraps Ring handler to add the following keys to requests:\n\n       :tempura/accept-langs ; e.g. [\\\"en-ES\\\" \\\"en-US\\\"], parsed from\n                             ; request's Accept-Language HTTP header.\n\n       :tempura/tr ; (partial tr tr-opts (:tr-locales ring-req accept-langs)),\n                   ; (fn ([resource-ids]) ([resource-ids args]))\"\n\n     [handler {:keys [tr-opts]}]\n     (fn [ring-req]\n       (let [accept-langs\n             (when-let [h (get-in ring-req [:headers \"accept-language\"])]\n               (parse-http-accept-header h))\n\n             tr-opts (enc/assoc-nx tr-opts :cache-locales? true)\n             tr      (partial tr tr-opts (:tr-locales ring-req accept-langs))\n\n             ring-req\n             (assoc ring-req\n               :tempura/accept-langs accept-langs\n               :tempura/tr tr)]\n\n         (handler ring-req)))))\n"]}