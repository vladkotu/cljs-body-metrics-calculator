{"version":3,"sources":["day8/re_frame_10x/view/traces.cljs"],"mappings":"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","names":["day8.re-frame-10x.view.traces/query->fn","query","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","trace","clojure.string/includes?","clojure.string/lower-case","day8.re-frame-10x.view.traces/add-filter","filter-items","filter-input","filter-type","G__57676","day8.re-frame-10x.inlined-deps.re-frame.v0v10v6.re-frame.core/dispatch","day8.re-frame-10x.view.traces/render-traces","visible-traces","trace-detail-expansions","cljs.core/deref","debug?","G__57677","day8.re-frame-10x.inlined-deps.re-frame.v0v10v6.re-frame.core/subscribe","cljs.core.doall.cljs$core$IFn$_invoke$arity$1","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2","p__57678","map__57679","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","index","op-type","id","operation","tags","duration","show-row?","cljs.core.get_in.cljs$core$IFn$_invoke$arity$3","op-name","cljs.core/vector?","cljs.core/second","cljs.core/List","G__57681","clojure.string.join.cljs$core$IFn$_invoke$arity$2","G__57683","cljs.core/Keyword","ev","cljs.core/name","day8.re-frame-10x.utils.pretty-print-condensed/truncate","day8.re-frame-10x.utils.pretty-print-condensed/str->namespaced-sym","temp__5735__auto__","vec__57690","seq__57691","cljs.core/seq","first__57692","cljs.core/first","cljs.core/next","_","params","or__4131__auto__","cljs.core.map.cljs$core$IFn$_invoke$arity$2","day8.re-frame-10x.utils.pretty-print-condensed/pretty-condensed","day8.re_frame_10x.utils.pretty_print_condensed.truncate_string.cljs$core$IFn$_invoke$arity$3","js/console","tag-str","cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","cljs.core/count","day8.re-frame-10x.view.traces/render","day8.re_frame_10x.inlined_deps.reagent.v0v8v0.reagent.core.atom.cljs$core$IFn$_invoke$arity$1","G__57700","input-error","categories","G__57701","G__57702","beginning","G__57703","end","G__57704","traces","G__57705","current-traces","G__57706","show-epoch-traces?","G__57707","p1__57696#","p1__57697#","p1__57698#","p1__57699#","toggle-category-fn","G__57708","traces-to-filter","G__57709","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","and__4120__auto__","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core/contains?","cljs.core/every-pred","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","save-query","js/isNaN","js/parseFloat","cljs.core/reset!","G__57716","G__57718","G__57719","G__57720","day8.re-frame-10x.utils.re-com/checkbox","G__57721","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","day8.re-frame-10x.view.components/search-input","item","G__57722","day8.re-frame-10x.view.components/autoscroll-list","G__57724","G__57725"],"sourcesContent":["(ns day8.re-frame-10x.view.traces\n  (:require [day8.re-frame-10x.view.components :as components]\n            [day8.re-frame-10x.utils.pretty-print-condensed :as pp]\n            [clojure.string :as str]\n            [day8.re-frame-10x.inlined-deps.reagent.v0v8v0.reagent.core :as r]\n            [day8.re-frame-10x.inlined-deps.re-frame.v0v10v6.re-frame.core :as rf]\n            [day8.re-frame-10x.utils.re-com :as rc]))\n\n(defn query->fn [query]\n  (if (= :contains (:filter-type query))\n    (fn [trace]\n      (str/includes? (str/lower-case (str (:operation trace) \" \" (:op-type trace)))\n                     (:query query)))\n    (fn [trace]\n      (< (:query query) (:duration trace)))))\n\n(defn add-filter [filter-items filter-input filter-type]\n  (rf/dispatch [:traces/add-filter filter-input filter-type]))\n\n(defn render-traces [visible-traces filter-items filter-input trace-detail-expansions]\n  (let [debug? @(rf/subscribe [:settings/debug?])]\n    (doall\n      (->>\n        visible-traces\n        (map-indexed (fn [index {:keys [op-type id operation tags duration] :as trace}]\n                       (let [show-row? (get-in @trace-detail-expansions [:overrides id]\n                                               (:show-all? @trace-detail-expansions))\n                             op-name   (if (vector? operation)\n                                         (second operation)\n                                         operation)\n                             #_#__ (js/console.log (devtools/header-api-call tags))]\n                         (list [:tr {:key      id\n                                     :on-click #(rf/dispatch [:traces/toggle-trace id])\n                                     :class    (str/join \" \" [\"trace--trace\"\n                                                              (case op-type\n                                                                :sub/create \"trace--sub-create\"\n                                                                :sub/run \"trace--sub-run\"\n                                                                :sub/dispose \"trace--sub-run\"\n                                                                :event \"trace--event\"\n                                                                :render \"trace--render\"\n                                                                :re-frame.router/fsm-trigger \"trace--fsm-trigger\"\n                                                                nil)])}\n                                [:td.trace--toggle\n                                 [:button.expansion-button (if show-row? \"\u25bc\" \"\u25b6\")]]\n                                [:td.trace--op\n                                 [:span.op-string {:on-click (fn [ev]\n                                                               (add-filter filter-items (name op-type) :contains)\n                                                               (.stopPropagation ev))}\n                                  (str op-type)]]\n                                [:td.trace--op-string\n                                 [:span.op-string {:on-click (fn [ev]\n                                                               (add-filter filter-items (name op-name) :contains)\n                                                               (.stopPropagation ev))}\n                                  (pp/truncate 20 :middle (pp/str->namespaced-sym op-name)) \" \"\n                                  [:span\n                                   {:style {:opacity 0.5\n                                            :display \"inline-block\"}}\n                                   (when-let [[_ & params] (or (get tags :query-v)\n                                                               (get tags :event))]\n                                     (->> (map pp/pretty-condensed params)\n                                          (str/join \", \")\n                                          (pp/truncate-string :middle 40)))]]]\n                                (if debug?\n                                  [:td.trace--meta\n                                   (:reaction (:tags trace)) \"/\" id]\n                                  [:td.trace--meta\n\n                                   (.toFixed duration 1) \" ms\"])]\n                               (when show-row?\n                                 [:tr.trace--details {:key       (str id \"-details\")\n                                                      :tab-index 0}\n                                  [:td]\n                                  [:td.trace--details-tags {:col-span 2\n                                                            :on-click #(.log js/console trace)}\n                                   [:div.trace--details-tags-text\n                                    (let [tag-str (prn-str tags)]\n                                      (str (subs tag-str 0 400)\n                                           (when (< 400 (count tag-str))\n                                             \" ...\")))]]\n                                  [:td.trace--meta.trace--details-icon\n                                   {:on-click #(.log js/console tags)}]])))))))))\n\n(defn render []\n  (let [filter-input            (r/atom \"\")\n        filter-items            (rf/subscribe [:traces/filter-items])\n        filter-type             (r/atom :contains)\n        input-error             (r/atom false)\n        categories              (rf/subscribe [:traces/categories])\n        trace-detail-expansions (rf/subscribe [:traces/expansions])\n        beginning               (rf/subscribe [:epochs/beginning-trace-id])\n        end                     (rf/subscribe [:epochs/ending-trace-id])\n        traces                  (rf/subscribe [:traces/all-visible-traces])\n        current-traces          (rf/subscribe [:traces/current-event-visible-traces])\n        show-epoch-traces?      (rf/subscribe [:trace-panel/show-epoch-traces?])]\n    (fn []\n      (let [toggle-category-fn #(rf/dispatch [:traces/toggle-categories %])\n            traces-to-filter   (if @show-epoch-traces?\n                                 @current-traces\n                                 @traces)\n            visible-traces     (cond->> traces-to-filter\n                                        ;; Remove cached subscriptions. Could add this back in as a setting later\n                                        ;; but it's pretty low signal/noise 99% of the time.\n                                        true (remove (fn [trace] (and (= :sub/create (:op-type trace))\n                                                                      (get-in trace [:tags :cached?]))))\n                                        (seq @categories) (filter (fn [trace] (when (contains? @categories (:op-type trace)) trace)))\n                                        (seq @filter-items) (filter (apply every-pred (map query->fn @filter-items)))\n                                        true (sort-by :id))\n            save-query         (fn [_]\n                                 (if (and (= @filter-type :slower-than)\n                                          (js/isNaN (js/parseFloat @filter-input)))\n                                   (reset! input-error true)\n                                   (do\n                                     (reset! input-error false)\n                                     (add-filter filter-items @filter-input @filter-type))))]\n\n        [:div.tab-contents\n         [:div.filter\n          [:div.filter-control\n           [:ul.filter-categories \"show: \"\n            [:li.filter-category {:class    (when (contains? @categories :event) \"active\")\n                                  :on-click #(rf/dispatch [:traces/toggle-categories #{:event}])}\n             \"events\"]\n            [:li.filter-category {:class    (when (contains? @categories :sub/run) \"active\")\n                                  :on-click #(rf/dispatch [:traces/toggle-categories #{:sub/run :sub/create :sub/dispose}])}\n             \"subscriptions\"]\n            [:li.filter-category {:class    (when (contains? @categories :render) \"active\")\n                                  :on-click #(rf/dispatch [:traces/toggle-categories #{:render}])}\n             \"reagent\"]\n            [:li.filter-category {:class    (when (contains? @categories :re-frame.router/fsm-trigger) \"active\")\n                                  :on-click #(rf/dispatch [:traces/toggle-categories #{:re-frame.router/fsm-trigger :componentWillUnmount}])}\n             \"internals\"]]\n           [rc/checkbox\n            :model show-epoch-traces?\n            :on-change #(rf/dispatch [:trace-panel/update-show-epoch-traces? %])\n            :label \"Only show traces for this epoch?\"]\n           [:div.filter-fields\n            [:select {:value     @filter-type\n                      :on-change #(reset! filter-type (keyword (.. % -target -value)))}\n             [:option {:value \"contains\"} \"contains\"]\n             [:option {:value \"slower-than\"} \"slower than\"]]\n            [:div.filter-control-input {:style {:margin-left 10}}\n             [components/search-input {:on-save   save-query\n                                       :on-change #(reset! filter-input (.. % -target -value))\n                                       :placeholder \"Type to filter traces\"}]\n             (if @input-error\n               [:div.input-error {:style {:color \"red\" :margin-top 5}}\n                \"Please enter a valid number.\"])]]]\n          [:ul.filter-items\n           (map (fn [item]\n                  ^{:key (:id item)}\n                  [:li.filter-item\n                   [:button.button\n                    {:style    {:margin 0}\n                     :on-click #(rf/dispatch [:traces/remove-filter (:id item)])}\n                    (:filter-type item) \": \" [:span.filter-item-string (:query item)]]])\n                @filter-items)]]\n         [components/autoscroll-list {:class \"panel-content-scrollable\" :scroll? true}\n          [:table\n           [:thead>tr\n            [:th {:style {:padding 0}}\n             [:button.text-button\n              {:style    {:cursor \"pointer\"}\n               :on-click #(rf/dispatch [:traces/toggle-all-expansions])}\n              (if (:show-all? @trace-detail-expansions) \"-\" \"+\")]]\n            [:th \"operations\"]\n            [:th\n             (str (count visible-traces) \" traces\")\n             [:span \"(\" [:button.text-button {:on-click #(rf/dispatch [:epochs/reset])} \"clear\"] \")\"]]\n            [:th {:style {:text-align \"right\"}} \"meta\"]]\n           [:tbody (render-traces visible-traces filter-items filter-input trace-detail-expansions)]]]]))))\n"]}