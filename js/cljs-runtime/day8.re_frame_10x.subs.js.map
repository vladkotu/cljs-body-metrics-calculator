{"version":3,"sources":["day8/re_frame_10x/subs.cljs"],"mappings":"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","names":["G__58353","G__58354","day8.re-frame-10x.inlined-deps.re-frame.v0v10v6.re-frame.core/reg-sub","db","_","cljs.core.get.cljs$core$IFn$_invoke$arity$2","G__58358","G__58359","G__58360","G__58361","settings","G__58363","G__58364","G__58365","G__58366","p__58369","vec__58371","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","panel-width%","n","G__58374","Math/ceil","G__58376","G__58377","G__58378","G__58379","G__58380","G__58381","G__58382","G__58383","p__58384","vec__58385","width","G__58388","G__58389","G__58390","G__58391","G__58392","G__58396","G__58397","G__58398","G__58399","G__58400","G__58401","G__58402","G__58403","G__58406","G__58407","G__58408","G__58409","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","cljs.core/vals","G__58412","G__58413","G__58414","G__58415","G__58418","G__58419","G__58420","G__58421","G__58422","G__58423","G__58424","G__58425","G__58426","G__58427","G__58428","G__58429","G__58434","G__58435","G__58436","G__58437","G__58438","G__58439","trace","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","G__58442","G__58443","G__58444","G__58445","G__58448","G__58449","G__58450","G__58451","app-db-settings","p1__58447#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/val","cljs.core/key","G__58452","G__58453","G__58454","G__58455","G__58456","G__58457","G__58458","G__58459","G__58460","G__58461","G__58462","G__58463","p__58464","vec__58465","expansions","path","cljs.core/contains?","G__58468","G__58469","G__58470","G__58471","root","G__58472","G__58473","G__58476","G__58477","G__58478","G__58479","G__58481","G__58482","G__58483","G__58484","G__58486","G__58487","G__58488","G__58489","traces","G__58490","G__58491","G__58492","G__58493","cljs.core/count","G__58494","G__58495","G__58496","G__58497","G__58498","G__58499","G__58500","G__58501","p__58502","vec__58503","beginning","ending","cljs.core.into.cljs$core$IFn$_invoke$arity$3","day8.re-frame-10x.utils.utils/id-between-xf","p__58507","vec__58508","day8.re-frame-10x.subs/filter-ignored-views","filtered-views","munged-ns","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core/munge","cljs.core/set","cljs.core.remove.cljs$core$IFn$_invoke$arity$1","day8.re-frame-10x.metamorphic/render?","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","clojure.string.last_index_of.cljs$core$IFn$_invoke$arity$2","G__58511","G__58512","G__58513","G__58514","G__58515","G__58516","G__58517","G__58518","G__58519","G__58520","G__58521","G__58522","G__58523","G__58524","G__58525","G__58526","trace-root","G__58527","G__58528","G__58531","G__58532","G__58536","G__58537","G__58538","G__58539","snapshot","G__58540","G__58541","G__58542","G__58543","G__58544","G__58545","G__58546","G__58547","p__58548","vec__58549","epochs","match-ids","current-id","match","cljs.core/last","cljs.core/first","G__58552","G__58553","G__58554","G__58555","match-state","G__58556","G__58557","G__58558","G__58559","day8.re-frame-10x.metamorphic/matched-event","G__58560","G__58561","G__58562","G__58563","G__58564","G__58565","G__58566","G__58567","G__58572","G__58573","G__58574","G__58575","G__58576","G__58577","G__58578","G__58579","G__58580","G__58581","G__58582","G__58583","G__58587","G__58588","G__58589","G__58590","G__58594","G__58595","G__58596","G__58597","G__58602","G__58603","G__58604","G__58605","G__58606","G__58607","p__58614","vec__58620","current","ids","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","G__58623","G__58624","G__58625","G__58626","G__58627","G__58628","p__58629","vec__58630","day8.re-frame-10x.utils.utils/last-in-vec","G__58633","G__58634","G__58635","G__58636","start-of-epoch","end-of-epoch","day8.re-frame-10x.metamorphic/elapsed-time","G__58640","G__58641","G__58642","G__58643","p1__58639#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","day8.re-frame-10x.metamorphic/request-animation-frame?","day8.re-frame-10x.metamorphic/request-animation-frame-end?","G__58648","G__58649","G__58650","G__58651","frame-traces","var_args","G__58659","day8.re-frame-10x.subs/+nil","args-arr__4751__auto__","len__4730__auto__","i__4731__auto__","argseq__4752__auto__","cljs.core/IndexedSeq","seq58656","G__58657","cljs.core/next","G__58658","self__4717__auto__","x","y","more","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core/+","G__58688","G__58689","G__58690","G__58691","G__58692","G__58693","p__58698","p__58699","vec__58702","vec__58705","af-start-end","epoch-traces","frame-number","vec__58708","frame-pairs","cljs.core.partition.cljs$core$IFn$_invoke$arity$2","start","end","af-traces","day8.re-frame-10x.metamorphic/id-between-xf","total-time","subs-time","cljs.core.transduce.cljs$core$IFn$_invoke$arity$3","cljs.core.filter.cljs$core$IFn$_invoke$arity$1","day8.re-frame-10x.metamorphic/subscription?","cljs.core.map.cljs$core$IFn$_invoke$arity$1","render-time","G__58711","G__58712","G__58713","G__58714","map__58716","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","event-time","event-handler-time","event-dofx-time","event-run-time","remaining-interceptors","G__58720","G__58721","G__58722","G__58723","start-of-render","G__58725","G__58726","G__58727","G__58728","cljs.core/empty?","G__58729","G__58730","G__58731","G__58732","G__58733","G__58734","G__58743","G__58744","G__58745","G__58746","epoch","G__58752","G__58753","G__58754","G__58755","G__58780","G__58781","G__58782","G__58783","day8.re-frame-10x.subs/string!","cljs.spec.alpha/and-spec-impl","p1__58787#","cljs.core/string?","cljs.spec.alpha/def-impl","cljs.spec.alpha/nilable-impl","cljs.spec.alpha.every_impl.cljs$core$IFn$_invoke$arity$4","G__58795","cljs.core/coll?","cljs.core/pos-int?","cljs.core/any?","cljs.spec.alpha/map-spec-impl","G__58796","cljs.core/map?","G__58885","day8.re-frame-10x.subs/sub-type-value","sub-type","G__58886","cljs.core/Keyword","day8.re-frame-10x.subs/accumulate-sub-value","order","exp","total","temp__5733__auto__","js/Math.pow","cljs.core/rest","day8.re-frame-10x.subs/accumulate-sub-value-memoized","cljs.core/memoize","day8.re-frame-10x.subs/sub-sort-val","order-x","order-y","cljs.core/compare","day8.re-frame-10x.subs/sub-op-type->type","t","G__58910","p__58945","p__58946","vec__58947","vec__58950","day8.re-frame-10x.subs/prepare-pod-info","sub-info","sub-state","subscription","remove-fn","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","me","cljs.core/constantly","subx","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","state","sub","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","or__4131__auto__","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3","G__58962","G__58963","G__58964","G__58965","G__58971","G__58972","G__58973","G__58974","G__58978","G__58979","G__58980","G__58981","G__58982","G__58983","G__58988","G__58989","G__58990","G__58991","G__58992","G__58993","G__58997","G__58998","G__58999","G__59000","G__59003","G__59004","G__59005","G__59006","G__59007","G__59008","G__59009","G__59010","G__59011","G__59012","p__59013","vec__59014","all-subs","ignore-unchanged-l2?","filter-str","pins","compare-fn","s1","s2","p1","cljs.core/boolean","p2","G__59020","cljs.core.sort.cljs$core$IFn$_invoke$arity$2","day8.re-frame-10x.metamorphic/unchanged-l2-subscription?","cljs.core/not-empty","p__59021","map__59024","id","clojure.string/includes?","G__59031","G__59032","G__59033","G__59034","subs","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","cljs.core/frequencies","G__59039","G__59040","G__59041","G__59042","counts","cljs.core.get.cljs$core$IFn$_invoke$arity$3","G__59052","G__59053","G__59054","G__59055","G__59059","G__59060","G__59061","G__59062","G__59064","G__59065","G__59066","G__59067","G__59072","G__59073","G__59074","G__59075","G__59077","G__59078","G__59079","G__59080","G__59085","G__59086","G__59087","G__59088","G__59094","G__59095","G__59096","G__59097","G__59098","G__59099","G__59106","G__59107","G__59108","G__59109","cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$2","i","temp__5739__auto__","code","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2","cljs.core/vec","G__59114","G__59115","G__59116","G__59117","G__59121","G__59122","G__59123","G__59124","form","zprint.core/zprint-str","G__59125","G__59126","G__59127","G__59128","G__59131","G__59132","G__59133","G__59134","G__59141","G__59142","G__59143","G__59144","G__59145","G__59146","G__59147","G__59148","day8.re-frame-10x.subs/canvas","js/document.createElement","G__59153","G__59154","context","G__59156","G__59157","G__59158","G__59159","G__59160","G__59161","p__59165","vec__59166","window-width","char-width","G__59169","G__59171","G__59172","G__59176","G__59177","G__59178","G__59179","component","G__59184","G__59185","G__59187","G__59188","G__59189","G__59190","errors"],"sourcesContent":["(ns day8.re-frame-10x.subs\n  (:require [day8.re-frame-10x.inlined-deps.re-frame.v0v10v6.re-frame.core :as rf]\n            [day8.re-frame-10x.metamorphic :as metam]\n            [day8.re-frame-10x.utils.utils :as utils]\n            [clojure.string :as str]\n            [cljs.spec.alpha :as s]\n            [zprint.core :as zp]))\n\n(rf/reg-sub\n  :settings/root\n  (fn [db _]\n    (get db :settings)))\n\n(rf/reg-sub\n  :settings/panel-width%\n  :<- [:settings/root]\n  (fn [settings _]\n    (get settings :panel-width%)))\n\n(rf/reg-sub\n  :settings/panel-width%-rounded\n  :<- [:settings/panel-width%]\n  ;; Rounds panel width to nearest n%\n  (fn [panel-width% [_ n]]\n    ;; https://stackoverflow.com/a/19621472\n    (/ (* (Math/ceil (/ (* panel-width% 100)\n                        n))\n          n)\n       100.0)))\n\n(rf/reg-sub\n  :settings/window-width\n  ;; Prefer window-width-rounded if you don't need the exact number of pixels.\n  :<- [:settings/root]\n  (fn [settings _]\n    (get settings :window-width)))\n\n(rf/reg-sub\n  :settings/window-width-rounded\n  :<- [:settings/window-width]\n  ;; Window width, rounded up to the nearest n pixels.\n  ;; Useful when you want to respond to window size changes\n  ;; but not too many of them.\n  (fn [width [_ n]]\n    (* (Math/ceil (/ width n))\n       n)))\n\n(rf/reg-sub\n  :settings/show-panel?\n  :<- [:settings/root]\n  (fn [settings _]\n    (get settings :show-panel?)))\n\n(rf/reg-sub\n  :settings/selected-tab\n  :<- [:settings/root]\n  (fn [settings _]\n    (if (:showing-settings? settings)\n      :settings\n      (get settings :selected-tab))))\n\n(rf/reg-sub\n  :settings/number-of-retained-epochs\n  :<- [:settings/root]\n  (fn [settings]\n    (:number-of-epochs settings)))\n\n(rf/reg-sub\n  :settings/ignored-events\n  :<- [:settings/root]\n  (fn [settings]\n    (sort-by :sort (vals (:ignored-events settings)))))\n\n(rf/reg-sub\n  :settings/filtered-view-trace\n  :<- [:settings/root]\n  (fn [settings]\n    (sort-by :sort (vals (:filtered-view-trace settings)))))\n\n(rf/reg-sub\n  :settings/low-level-trace\n  ;; TODO: filter from traces panel\n  ;; TODO: eventually drop these low level traces after computing the state we need from them.\n  :<- [:settings/root]\n  (fn [settings]\n    (:low-level-trace settings)))\n\n(rf/reg-sub\n  :settings/debug?\n  :<- [:settings/root]\n  (fn [settings]\n    (:debug? settings)))\n\n(rf/reg-sub\n  :settings/app-db-follows-events?\n  :<- [:settings/root]\n  (fn [settings]\n    (:app-db-follows-events? settings)))\n\n;; App DB\n\n(rf/reg-sub\n  :app-db/root\n  (fn [db _]\n    (get db :app-db)))\n\n(rf/reg-sub\n  :app-db/current-epoch-app-db-after\n  :<- [:epochs/current-event-trace]\n  (fn [trace _]\n    (get-in trace [:tags :app-db-after])))\n\n(rf/reg-sub\n  :app-db/current-epoch-app-db-before\n  :<- [:epochs/current-event-trace]\n  (fn [trace _]\n    (get-in trace [:tags :app-db-before])))\n\n(rf/reg-sub\n  :app-db/paths\n  :<- [:app-db/root]\n  (fn [app-db-settings _]\n    (map #(assoc (val %) :id (key %))\n         (get app-db-settings :paths))))\n\n(rf/reg-sub\n  :app-db/search-string\n  :<- [:app-db/root]\n  (fn [app-db-settings _]\n    (get app-db-settings :search-string)))\n\n(rf/reg-sub\n  :app-db/expansions\n  :<- [:app-db/root]\n  (fn [app-db-settings _]\n    (get app-db-settings :json-ml-expansions)))\n\n(rf/reg-sub\n  :app-db/node-expanded?\n  :<- [:app-db/expansions]\n  (fn [expansions [_ path]]\n    (contains? expansions path)))\n\n(rf/reg-sub\n  :app-db/reagent-id\n  :<- [:app-db/root]\n  (fn [root _]\n    (:reagent-id root)))\n\n;;\n\n(rf/reg-sub\n  :traces/trace-root\n  (fn [db _]\n    (:traces db)))\n\n(rf/reg-sub\n  :trace-panel/root\n  (fn [db _]\n    (:trace-panel db)))\n\n(rf/reg-sub\n  :traces/filter-items\n  (fn [db _]\n    (get-in db [:traces :filter-items])))\n\n(rf/reg-sub\n  :traces/expansions\n  (fn [db _]\n    (get-in db [:traces :expansions])))\n\n(rf/reg-sub\n  :traces/categories\n  (fn [db _]\n    (get-in db [:traces :categories])))\n\n(rf/reg-sub\n  :traces/all-traces\n  :<- [:traces/trace-root]\n  (fn [traces _]\n    (:all-traces traces)))\n\n(rf/reg-sub\n  :traces/number-of-traces\n  :<- [:traces/all-traces]\n  (fn [traces _]\n    (count traces)))\n\n(rf/reg-sub\n  :traces/current-event-traces\n  :<- [:traces/all-traces]\n  :<- [:epochs/beginning-trace-id]\n  :<- [:epochs/ending-trace-id]\n  (fn [[traces beginning ending] _]\n    (into [] (utils/id-between-xf beginning ending) traces)))\n\n(defn filter-ignored-views [[traces filtered-views] _]\n  (let [munged-ns (->> filtered-views\n                       (map (comp munge :ns-str))\n                       (set))]\n    (into []\n          ;; Filter out view namespaces we don't care about.\n          (remove\n            (fn [trace] (and (metam/render? trace)\n                             (contains? munged-ns (subs (:operation trace) 0 (str/last-index-of (:operation trace) \".\"))))))\n          traces)))\n\n(rf/reg-sub\n  :traces/current-event-visible-traces\n  :<- [:traces/current-event-traces]\n  :<- [:settings/filtered-view-trace]\n  filter-ignored-views)\n\n(rf/reg-sub\n  :traces/all-visible-traces\n  :<- [:traces/all-traces]\n  :<- [:settings/filtered-view-trace]\n  filter-ignored-views)\n\n(rf/reg-sub\n  :trace-panel/show-epoch-traces?\n  :<- [:trace-panel/root]\n  (fn [trace-root]\n    (:show-epoch-traces? trace-root)))\n\n;;\n\n(rf/reg-sub\n  :global/unloading?\n  (fn [db _]\n    (get-in db [:global :unloading?])))\n\n;;\n\n(rf/reg-sub\n  :snapshot/snapshot-root\n  (fn [db _]\n    (:snapshot db)))\n\n(rf/reg-sub\n  :snapshot/snapshot-ready?\n  :<- [:snapshot/snapshot-root]\n  (fn [snapshot _]\n    (contains? snapshot :current-snapshot)))\n\n;;\n\n(rf/reg-sub\n  :epochs/epoch-root\n  (fn [db _]\n    (:epochs db)))\n\n(rf/reg-sub\n  :epochs/current-match-state\n  :<- [:epochs/epoch-root]\n  :<- [:epochs/match-ids]\n  (fn [[epochs match-ids] _]\n    (let [current-id (:current-epoch-id epochs)\n          match      (cond\n                       (nil? current-id) (last (:matches epochs))\n                       (< current-id (first match-ids)) (first (:matches epochs))\n                       ;; This case seems impossible, but can happen if the user filters out\n                       ;; an event that they are 'on'.\n                       (> current-id (last match-ids)) (last (:matches epochs))\n                       :else (get (:matches-by-id epochs) current-id))]\n      match)))\n\n(rf/reg-sub\n  :epochs/current-match\n  :<- [:epochs/current-match-state]\n  (fn [match-state _]\n    (:match-info match-state)))\n\n(rf/reg-sub\n  :epochs/current-event-trace\n  :<- [:epochs/current-match]\n  (fn [match _]\n    (metam/matched-event match)))\n\n(rf/reg-sub\n  :epochs/current-event\n  :<- [:epochs/current-event-trace]\n  (fn [trace _]\n    (get-in trace [:tags :event])))\n\n(rf/reg-sub\n  :epochs/number-of-matches\n  :<- [:epochs/epoch-root]\n  (fn [epochs _]\n    (count (get epochs :matches))))\n\n(rf/reg-sub\n  :epochs/current-event-index\n  :<- [:epochs/epoch-root]\n  (fn [epochs _]\n    (:current-epoch-index epochs)))\n\n(rf/reg-sub\n  :epochs/current-epoch-id\n  :<- [:epochs/current-match]\n  (fn [epochs _]\n    (:id (first epochs))))\n\n(rf/reg-sub\n  :epochs/match-ids\n  :<- [:epochs/epoch-root]\n  (fn [epochs]\n    (:match-ids epochs)))\n\n(rf/reg-sub\n  :epochs/beginning-trace-id\n  :<- [:epochs/current-match]\n  (fn [match]\n    (:id (first match))))\n\n(rf/reg-sub\n  :epochs/ending-trace-id\n  :<- [:epochs/current-match]\n  (fn [match]\n    (:id (last match))))\n\n(rf/reg-sub\n  :epochs/older-epochs-available?\n  :<- [:epochs/current-epoch-id]\n  :<- [:epochs/match-ids]\n  (fn [[current ids]]\n    (and (< 1 (count ids))\n         (or (nil? current)\n             (> current (nth ids 0))))))\n\n(rf/reg-sub\n  :epochs/newer-epochs-available?\n  :<- [:epochs/current-epoch-id]\n  :<- [:epochs/match-ids]\n  (fn [[current ids]]\n    (and (< 1 (count ids))\n         (some? current)\n         (< current (utils/last-in-vec ids)))))\n\n;;\n\n(rf/reg-sub\n  :timing/total-epoch-time\n  :<- [:traces/current-event-traces]\n  (fn [traces]\n    (let [start-of-epoch (nth traces 0)\n          end-of-epoch   (utils/last-in-vec traces)]\n      (metam/elapsed-time start-of-epoch end-of-epoch))))\n\n(rf/reg-sub\n  :timing/animation-frame-traces\n  :<- [:traces/current-event-traces]\n  (fn [traces]\n    (filter #(or (metam/request-animation-frame? %)\n                 (metam/request-animation-frame-end? %))\n            traces)))\n\n(rf/reg-sub\n  :timing/animation-frame-count\n  :<- [:timing/animation-frame-traces]\n  (fn [frame-traces]\n    (count (filter metam/request-animation-frame? frame-traces))))\n\n(defn ^number +nil\n  \"Returns the sum of nums. (+) returns nil (not 0 like in cljs.core).\"\n  ([] nil)\n  ([x] x)\n  ([x y] (cljs.core/+ x y))\n  ([x y & more]\n   (reduce + (cljs.core/+ x y) more)))\n\n(rf/reg-sub\n  :timing/animation-frame-time\n  :<- [:timing/animation-frame-traces]\n  :<- [:traces/current-event-traces]\n  (fn [[af-start-end epoch-traces] [_ frame-number]]\n    (let [frame-pairs (partition 2 af-start-end)\n          [start end] (nth frame-pairs (dec frame-number))\n          af-traces   (into [] (metam/id-between-xf (:id start) (:id end)) epoch-traces)\n          total-time  (metam/elapsed-time start end)\n          ;; TODO: these times double count renders/subs that happened as a child of another\n          ;; need to fix either here, at ingestion point, or most preferably in re-frame at tracing point.\n          subs-time   (transduce (comp\n                                   (filter metam/subscription?)\n                                   (map :duration))\n                                 +nil af-traces)\n          render-time (transduce (comp\n                                   (filter metam/render?)\n                                   (map :duration))\n                                 +nil af-traces)]\n      {:timing/animation-frame-total  total-time\n       :timing/animation-frame-subs   subs-time\n       :timing/animation-frame-render render-time\n       ;; TODO: handle rounding weirdness here, make sure it is never below 0.\n       :timing/animation-frame-misc   (- total-time subs-time render-time)})))\n\n(rf/reg-sub\n  :timing/event-processing-time\n  :<- [:epochs/current-match-state]\n  (fn [match]\n    (let [{:re-frame/keys [event-time event-handler-time event-dofx-time event-run-time]} (get match :timing)\n          ;; The scope of tracing is:\n          ;; event-run-time\n          ;;   event-time\n          ;;     event-handler-time\n          ;;     event-dofx-time\n          ;;     <other stuff>\n          ;;   <other stuff>\n          remaining-interceptors (- event-time event-handler-time event-dofx-time)]\n      {:timing/event-total        event-run-time\n       :timing/event-handler      event-handler-time\n       :timing/event-effects      event-dofx-time\n       :timing/event-interceptors remaining-interceptors\n       ;; TODO: look at splitting out interceptors from misc, there was a suspiciously high amount of time\n       ;; in misc on some events, so that needs to be investigated.\n       ; :timing/event-misc (- event-run-time event-time)\n       :timing/event-misc         (- event-run-time event-handler-time event-dofx-time)})))\n\n(rf/reg-sub\n  :timing/render-time\n  :<- [:traces/current-event-traces]\n  (fn [traces]\n    (let [start-of-render (first (filter metam/request-animation-frame? traces))\n          end-of-epoch    (utils/last-in-vec traces)]\n      (metam/elapsed-time start-of-render end-of-epoch))))\n\n(rf/reg-sub\n  :timing/data-available?\n  :<- [:traces/current-event-traces]\n  (fn [traces]\n    (not (empty? traces))))\n\n;;\n\n(rf/reg-sub\n  :subs/root\n  (fn [db _]\n    (:subs db)))\n\n(rf/reg-sub\n  :subs/all-sub-traces\n  :<- [:traces/current-event-traces]\n  (fn [traces]\n    (filter metam/subscription? traces)))\n\n(rf/reg-sub\n  :subs/subscription-info\n  :<- [:epochs/epoch-root]\n  (fn [epoch]\n    (:subscription-info epoch)))\n\n(rf/reg-sub\n  :subs/sub-state\n  :<- [:epochs/epoch-root]\n  (fn [epochs]\n    (:sub-state epochs)))\n\n(rf/reg-sub\n  :subs/current-epoch-sub-state\n  :<- [:epochs/current-match-state]\n  (fn [match-state]\n    (:sub-state match-state)))\n\n(def string! (s/and string? #(not (empty? %))))\n\n(s/def :sub/id string!)\n(s/def :sub/reagent-id string!)\n(s/def :sub/run-types #{:sub/create :sub/dispose :sub/run :sub/not-run})\n(s/def :sub/order (s/nilable (s/coll-of :sub/run-types)))\n(s/def :sub/layer (s/nilable pos-int?))\n(s/def :sub/path-data any?)\n(s/def :sub/path string!)\n(s/def :sub/value any?)\n(s/def :sub/previous-value any?)\n(s/def :subs/view-panel-sub\n  (s/keys :req-un [:sub/id :sub/reagent-id :sub/order :sub/layer :sub/path-data :sub/path]\n          :opt-un [:sub/value :sub/previous-value]))\n(s/def :subs/view-subs (s/coll-of :subs/view-panel-sub))\n\n(defn sub-type-value\n  [sub-type]\n  (case sub-type\n    :sub/create 5\n    :sub/run 4\n    :sub/dispose 3\n    :sub/not-run 2\n    1))\n\n(defn accumulate-sub-value\n  \"Calculate a sorting value for a series of subscription trace types.\"\n  ;; A reader might reasonably ask, \"Why are we going to all this work here?\"\n  ;; We calculate a custom value rather than just comparing two order vectors,\n  ;; because the default compare logic for comparing vectors is to sort shorter\n  ;; vectors above longer ones, whereas we want all CRR, CR, C orders to be\n  ;; sorted adjacent to each other, in that order.\n  ;;\n  ;; The first sub type in the order is worth (n * 10^3),\n  ;; then the next one (if it exists), is worth (n * 10^2), and so-on.\n  [order]\n  (loop [exp   3\n         total 0\n         order order]\n    (if-let [sub-type (first order)]\n      (recur (dec exp) (+ total (* (sub-type-value sub-type) (js/Math.pow 10 exp))) (rest order))\n      total)))\n\n(def accumulate-sub-value-memoized\n  (memoize accumulate-sub-value))\n\n(defn sub-sort-val [order-x order-y]\n  ;; Note x and y are reversed here so that the \"highest\" sub orders get sorted first.\n  (compare (accumulate-sub-value-memoized order-y)\n           (accumulate-sub-value-memoized order-x)))\n\n(defn sub-op-type->type [t]\n  (case (:op-type t)\n    :sub/create :created\n    :sub/run :re-run\n    :sub/dispose :destroyed\n\n    :not-run))\n\n(defn prepare-pod-info\n  \"Returns sub info prepared for rendering in pods\"\n  [[sub-info sub-state] [subscription]]\n  (let [remove-fn (if (= subscription :subs/intra-epoch-subs)\n                    (fn [me] (nil? (:order (val me))))\n                    (constantly false))\n        subx      (->> sub-state\n                       (remove remove-fn)\n                       (map (fn [me] (let [state        (val me)\n                                           subscription (:subscription state)\n                                           sub          {:id         (key me)\n                                                         :reagent-id (key me)\n                                                         :layer      (get-in sub-info [(first subscription) :layer])\n                                                         :path-data  subscription\n                                                         :path       (pr-str subscription)\n                                                         :order      (or (:order state) [:sub/not-run])\n                                                         :sub/traits (:sub/traits state)}\n                                           sub          (if (contains? state :value)\n                                                          (assoc sub :value (:value state))\n                                                          sub)\n                                           sub          (if (contains? state :previous-value)\n                                                          (assoc sub :previous-value (:previous-value state))\n                                                          sub)]\n                                       sub)))\n                       (sort-by :order sub-sort-val)        ;; Also sort by subscription-id\n                       #_(sort-by :path))]\n    subx))\n\n\n(rf/reg-sub\n  :subs/pre-epoch-state\n  :<- [:subs/current-epoch-sub-state]\n  (fn [sub-state]\n    (:pre-epoch-state sub-state)))\n\n(rf/reg-sub\n  :subs/reaction-state\n  :<- [:subs/current-epoch-sub-state]\n  (fn [sub-state]\n    (:reaction-state sub-state)))\n\n(rf/reg-sub\n  :subs/intra-epoch-subs\n  :<- [:subs/subscription-info]\n  :<- [:subs/pre-epoch-state]\n  prepare-pod-info)\n\n(rf/reg-sub\n  :subs/all-subs\n  :<- [:subs/subscription-info]\n  :<- [:subs/reaction-state]\n  prepare-pod-info)\n\n\n(rf/reg-sub\n :subs/filter-str\n :<- [:subs/root]\n (fn [root _]\n   (:filter-str root)))\n\n\n(rf/reg-sub\n  :subs/visible-subs\n  :<- [:subs/all-subs]\n  :<- [:subs/ignore-unchanged-l2-subs?]\n  :<- [:subs/filter-str]\n  :<- [:subs/sub-pins]\n  (fn [[all-subs ignore-unchanged-l2? filter-str pins]]\n    (let [compare-fn (fn [s1 s2]\n                       (let [p1 (boolean (get-in pins [(:id s1) :pin?]))\n                             p2 (boolean (get-in pins [(:id s2) :pin?]))]\n                         (if (= p1 p2)\n                           (compare (:path s1) (:path s2))\n                           p1)))]\n      (cond->> (sort compare-fn all-subs)\n        ignore-unchanged-l2?   (remove metam/unchanged-l2-subscription?)\n        (not-empty filter-str) (filter (fn [{:keys [path id]}]\n                                         (or (str/includes? path filter-str)\n                                             (get-in pins [id :pin?]))))))))\n\n(rf/reg-sub\n  :subs/sub-counts\n  :<- [:subs/visible-subs]\n  (fn [subs _]\n    (->> subs\n         (mapcat :order)\n         (frequencies))))\n\n(rf/reg-sub\n  :subs/created-count\n  :<- [:subs/sub-counts]\n  (fn [counts]\n    (get counts :sub/create 0)))\n\n(rf/reg-sub\n  :subs/re-run-count\n  :<- [:subs/sub-counts]\n  (fn [counts]\n    (get counts :sub/run 0)))\n\n(rf/reg-sub\n  :subs/destroyed-count\n  :<- [:subs/sub-counts]\n  (fn [counts]\n    (get counts :sub/dispose 0)))\n\n(rf/reg-sub\n  :subs/not-run-count\n  :<- [:subs/sub-counts]\n  (fn [counts]\n    (get counts :sub/not-run 0)))\n\n(rf/reg-sub\n  :subs/unchanged-l2-subs-count\n  :<- [:subs/all-subs]\n  (fn [subs]\n    (count (filter metam/unchanged-l2-subscription? subs))))\n\n(rf/reg-sub\n  :subs/ignore-unchanged-l2-subs?\n  :<- [:subs/root]\n  (fn [subs _]\n    (:ignore-unchanged-subs? subs true)))\n\n(rf/reg-sub\n  :subs/sub-expansions\n  :<- [:subs/root]\n  (fn [subs _]\n    (:expansions subs)))\n\n(rf/reg-sub\n  :subs/sub-pins\n  :<- [:subs/root]\n  (fn [subs _]\n    (:pinned subs)))\n\n;;\n\n(rf/reg-sub\n  :code/root\n  (fn [db _]\n    (:code db)))\n\n(rf/reg-sub\n  :code/current-code\n  :<- [:traces/current-event-traces]\n  (fn [traces _]\n    (keep-indexed (fn [i trace]\n                    (when-some [code (get-in trace [:tags :code])]\n                      {:id       i\n                       :trace-id (:id trace)\n                       :title    (pr-str (:op-type trace))\n                       :code     (->> code (map-indexed (fn [i code] (assoc code :id i))) vec) ;; Add index\n                       :form     (get-in trace [:tags :form])}))\n                  traces)))\n\n(rf/reg-sub\n  :code/current-form\n  :<- [:code/current-code]\n  (fn [code _]\n    (:form (first code))))\n\n(rf/reg-sub\n  :code/current-zprint-form\n  :<- [:code/current-form]\n  (fn [form _]\n    (zp/zprint-str form)))\n\n(rf/reg-sub\n  :code/code-open?\n  :<- [:code/root]\n  (fn [code _]\n    (:code-open? code)))\n\n(rf/reg-sub\n  :code/highlighted-form\n  :<- [:code/root]\n  (fn [code _]\n    (:highlighted-form code)))\n\n(rf/reg-sub\n  :code/show-all-code?\n  :<- [:code/root]\n  (fn [code _]\n    (:show-all-code? code)))\n\n(rf/reg-sub\n  :code/repl-msg-state\n  :<- [:code/root]\n  (fn [code _]\n    (:repl-msg-state code)))\n\n(def canvas (js/document.createElement \"canvas\"))\n\n(rf/reg-sub\n  :code/single-character-width\n  (fn [_ _]\n    (let [context (.getContext canvas \"2d\")]\n      (set! (.-font context) \"monospace 1em\")\n      (.-width (.measureText context \"T\")))))\n\n(rf/reg-sub\n    :code/max-column-width\n    :<- [:settings/window-width-rounded 100]\n    :<- [:code/single-character-width]\n    ;; It seems like it would be possible to do something smarter responding to panel sizing,\n    ;; but that introduces a lot of jank, so we just set to maximum possible window width.\n    (fn [[window-width char-width] _]\n      (Math/ceil (/ window-width\n                    char-width))))\n\n;;\n\n(rf/reg-sub\n  :component/root\n  (fn [db _]\n    (:component db)))\n\n(rf/reg-sub\n  :component/direction\n  :<- [:component/root]\n  (fn [component _]\n    (:direction component)))\n\n;;\n\n(rf/reg-sub\n  :errors/root\n  (fn [db _]\n    (:errors db)))\n\n(rf/reg-sub\n  :errors/popup-failed?\n  :<- [:errors/root]\n  (fn [errors _]\n    (:popup-failed? errors)))\n"]}