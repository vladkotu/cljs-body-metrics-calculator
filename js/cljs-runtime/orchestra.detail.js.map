{"version":3,"sources":["orchestra/detail.cljc"],"mappings":"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","names":["cljs.spec.alpha/def-impl","cljs.spec.alpha/and-spec-impl","p1__67436#","cljs.core/simple-symbol?","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","cljs.spec.alpha/or-spec-impl","cljs.core/vector?","cljs.spec.alpha/cat-impl","cljs.spec.alpha/rep-impl","cljs.spec.alpha/maybe-impl","cljs.spec.alpha.every_impl.cljs$core$IFn$_invoke$arity$4","G__67485","cljs.core/ident?","G__67489","cljs.core/symbol?","G__67490","cljs.spec.alpha.tuple_impl.cljs$core$IFn$_invoke$arity$2","G__67496","cljs.core/map?","i__12932__auto__","v__12933__auto__","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","cljs.core/any?","cljs.spec.alpha/map-spec-impl","G__67497","p1__67506#","cljs.core/qualified-keyword?","G__67528","fexpr__67527","cljs.core/name","G__67529","G__67544","cljs.core/coll?","cljs.spec.alpha/merge-spec-impl","p1__67551#","cljs.core/some?","cljs.core/string?","cljs.spec.alpha/alt-impl","cljs.spec.alpha/rep+impl","cljs.spec.alpha.spec_impl.cljs$core$IFn$_invoke$arity$4","orchestra.detail/*cljs?*","orchestra.detail/get-global-defn","orchestra.detail/spec-fn","fn-name","G__67665","cljs.core/Keyword","js/Error","G__67676","p__67692","vec__67693","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","orchestra.detail/render-binding","kind","value","G__67699","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","orchestra.detail/explode-arity","arity","args","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","rendered-args","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","rendered-varargs","temp__5737__auto__","varargs","cljs.core.into.cljs$core$IFn$_invoke$arity$2","p__67700","map__67701","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","exploded-args","cljs.core.get.cljs$core$IFn$_invoke$arity$2","exploded-body","orchestra.detail/render-arity","cljs.core/cons","orchestra.detail/extract-arg-specs","arg-specs","p__67705","map__67706","spec","cljs.core/List","arity-specs","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","orchestra.detail/arg->kw","idx","arg","cljs.core/Symbol","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","orchestra.detail/build-cat","arity-arg-names","cljs.core.interleave.cljs$core$IFn$_invoke$arity$2","orchestra.detail/name-arity","arg-count","orchestra.detail/build-args-spec","conformed-arities","exploded-arities","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","cljs.core/count","arg-names","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2","arg-counts","cats","cljs.core.mapv.cljs$core$IFn$_invoke$arity$3","named-cats","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","cljs.core/vector","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/first","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","orchestra.detail/explode-def","seq67716","self__4718__auto__","cljs.core/seq","conformed","cljs.spec.alpha/*compile-asserts*","cljs.core/deref","cljs.spec.alpha/*runtime-asserts*","cljs.spec.alpha/assert*","cljs.spec.alpha/conform","cljs.core/second","args-spec","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core/select-keys","orchestra.detail/defn-spec-helper","seq67723","cljs.core.sequence.cljs$core$IFn$_invoke$arity$1","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","s-fdef","exploded","stripped-meta","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","or__4131__auto__"],"sourcesContent":["(ns orchestra.detail\n  (:require [#?(:clj clojure.spec.alpha\n                :cljs cljs.spec.alpha)\n             :as s]))\n\n;;;; destructure\n\n(s/def ::local-name (s/and simple-symbol? #(not= '& %)))\n\n(s/def ::binding-form\n  (s/or :sym ::local-name\n        :seq ::seq-binding-form\n        :map ::map-binding-form))\n\n;; sequential destructuring\n\n(s/def ::seq-binding-form\n  (s/and vector?\n         (s/cat :elems (s/* ::binding-form)\n                :rest (s/? (s/cat :amp #{'&} :form ::binding-form))\n                :as (s/? (s/cat :as #{:as} :sym ::local-name)))))\n\n;; map destructuring\n\n(s/def ::keys (s/coll-of ident? :kind vector?))\n(s/def ::syms (s/coll-of symbol? :kind vector?))\n(s/def ::strs (s/coll-of simple-symbol? :kind vector?))\n(s/def ::or (s/map-of simple-symbol? any?))\n(s/def ::as ::local-name)\n\n(s/def ::map-special-binding\n  (s/keys :opt-un [::as ::or ::keys ::syms ::strs]))\n\n(s/def ::map-binding (s/tuple ::binding-form any?))\n\n(s/def ::ns-keys\n  (s/tuple\n    (s/and qualified-keyword? #(-> % name #{\"keys\" \"syms\"}))\n    (s/coll-of simple-symbol? :kind vector?)))\n\n(s/def ::map-bindings\n  (s/every (s/or :mb ::map-binding\n                 :nsk ::ns-keys\n                 :msb (s/tuple #{:as :or :keys :syms :strs} any?)) :into {}))\n\n(s/def ::map-binding-form (s/merge ::map-bindings ::map-special-binding))\n\n(s/def ::spec (s/and some? #(not (string? %)))) ; TODO: Spec for specs\n(s/def ::args (s/and vector?\n                     (s/cat :args (s/* (s/cat :binding ::binding-form\n                                              :spec ::spec))\n                            :varargs (s/? (s/cat :amp #{'&}\n                                                 :form ::binding-form\n                                                 :spec ::spec)))))\n(s/def ::arity (s/cat :args ::args\n                      :body (s/* any?)))\n(s/def ::defn-spec-args (s/cat :name simple-symbol?\n                               :ret ::spec\n                               :docstring (s/? string?)\n                               :meta (s/? map?)\n                               :arities (s/alt :single ::arity\n                                               :multiple (s/+ (s/spec ::arity)))))\n\n(def ^:dynamic *cljs?* false)\n\n(defn get-global-defn []\n  'clojure.core/defn)\n\n(defn spec-fn [fn-name]\n  ; Can't use a map here, since these are macros.\n  (if *cljs?*\n    (case fn-name\n      ::spec 'cljs.spec.alpha/spec\n      ::cat 'cljs.spec.alpha/cat\n      ::or 'cljs.spec.alpha/or\n      ::fdef 'cljs.spec.alpha/fdef)\n    (case fn-name\n      ::spec 'clojure.spec.alpha/spec\n      ::cat 'clojure.spec.alpha/cat\n      ::or 'clojure.spec.alpha/or\n      ::fdef 'clojure.spec.alpha/fdef)))\n\n(defn render-binding\n  \"Doing the job of unform, since it turns destructured sequences into lists.\n   'cause it's silly.\"\n  [[kind value]]\n  (case kind\n    :sym value\n    :seq (mapv render-binding (:elems value))\n    :map value))\n\n(defn explode-arity\n  \"Strips the specs from the arity's args and gets it ready for consumption.\n   Does the job of s/unform, since s/unform doesn't do its job well.\"\n  [arity]\n  (let [args (get-in arity [:args :args])\n        rendered-args (mapv (comp render-binding :binding) args)\n        rendered-varargs (if-some [varargs (get-in arity [:args :varargs])]\n                           ['& (render-binding (:form varargs))]\n                           [])]\n    {::exploded-args (into rendered-args rendered-varargs)\n     ::exploded-body (:body arity)}))\n\n(defn render-arity\n  \"Turns an exploded arity into something which defn can consume.\"\n  [{:keys [::exploded-args ::exploded-body]}]\n  (cons exploded-args exploded-body))\n\n(defn extract-arg-specs\n  \"Returns a sequence of specs, based on the arity's args.\"\n  [arity]\n  (let [args (get-in arity [:args :args])\n        varargs (get-in arity [:args :varargs])\n        arg-specs (mapv (fn [{:keys [spec]}]\n                          ; We automatically wrap non-vararg specs in (s/spec).\n                          ; This ensure no regex specs flatten to apply to the\n                          ; fdef's outer :args s/cat.\n                          (list (spec-fn ::spec) spec))\n                        args)\n        arity-specs (if-some [varargs (get-in arity [:args :varargs])]\n                      (conj arg-specs (:spec varargs))\n                      arg-specs)]\n    arity-specs))\n\n(defn arg->kw\n  \"Converts are argument to a keyword. Arguments may use destructuring, so they\n   may not be a symbol. In that case, just fill in something helpful.\"\n  [idx arg]\n  (if (symbol? arg)\n    (keyword arg)\n    (keyword (str \"arg-\" idx))))\n\n(defn build-cat\n  [arity-arg-names arity-specs]\n  (cons (spec-fn ::cat) (interleave arity-arg-names arity-specs)))\n\n(defn name-arity\n  [arg-count]\n  (keyword (str \"arity-\" arg-count)))\n\n(defn build-args-spec\n  [conformed-arities exploded-arities]\n  (let [arg-specs (->> (mapv extract-arg-specs conformed-arities)\n                       (sort-by count)) ; Sort for consistency\n        arg-names (->> (map (fn [arity]\n                              (map-indexed arg->kw (::exploded-args arity)))\n                            exploded-arities)\n                       (sort-by count)) ; Sort for consistency\n        arg-counts (mapv count arg-specs)\n        cats (mapv build-cat arg-names arg-specs)\n        named-cats (mapcat vector (mapv name-arity arg-counts) cats)]\n    ; To keep specs as simple as possible, we avoid the s/or when there's only\n    ; a single arity. This is the typical case, so it's worth prefering\n    (if (= 1 (count arg-specs))\n      (first cats)\n      (cons (spec-fn ::or) named-cats))))\n\n(defn explode-def\n  \"Takes in the variadic values of a defn-spec and returns a map of the\n   various parts. Handles multiple arities and optional doc strings.\"\n  [& args]\n  (let [conformed (->> (s/assert ::defn-spec-args args)\n                       (s/conform ::defn-spec-args))\n        ; Single arity fns don't require surrounding parens. Conform them to\n        ; look like multiple arities before continuing.\n        conformed-arities (if (= :single (-> conformed :arities first))\n                            [(-> conformed :arities second)]\n                            (-> conformed :arities second))\n        exploded-arities (mapv explode-arity conformed-arities)\n        args-spec (build-args-spec conformed-arities exploded-arities)]\n    {::name (:name conformed)\n     ::doc (:docstring conformed)\n     ::arities (map render-arity exploded-arities)\n     ::spec-map (merge (select-keys (:meta conformed) [:fn])\n                       (select-keys conformed [:ret])\n                       {:args args-spec})}))\n\n(defn defn-spec-helper [& args]\n  (let [s-fdef (spec-fn ::fdef)\n        exploded (apply explode-def args)\n        stripped-meta (dissoc (:meta exploded) :fn)]\n    `(do\n       (defn ~(::name exploded)\n         ~(or (::doc exploded) \"\")\n         ~(or stripped-meta {})\n         ~@(::arities exploded))\n       (~s-fdef ~(::name exploded)\n                :args ~(-> exploded ::spec-map :args)\n                :fn ~(-> exploded ::spec-map :fn)\n                :ret ~(-> exploded ::spec-map :ret)))))\n"]}