{"version":3,"sources":["body_index_calculator/validation.cljs"],"mappings":"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","names":["body-index-calculator.validation/rules","body-index-calculator.validation/fail-spec","spec","value","cljs.spec.alpha/explain-data","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.distinct.cljs$core$IFn$_invoke$arity$1","cljs.core/last","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core/keyword","cljs.core/name","body-index-calculator.validation/get-rules","select","name","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/concat","cljs.core/vals","G__49661","body-index-calculator.validation/apply-rules","rules","p1__49662#","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core/empty?","cljs.core/first","body-index-calculator.validation/valid","body-index-calculator.validation/invalid","fails","p__49663","map__49664","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","body-index-calculator.validation/validate-with-rules","temp__5733__auto__","cljs.spec.alpha/def-impl","cljs.core/boolean?","cljs.core/keyword?","cljs.spec.alpha/nilable-impl","cljs.core/any?","cljs.spec.alpha.every_impl.cljs$core$IFn$_invoke$arity$4","G__49666","cljs.core/coll?","cljs.spec.alpha/map-spec-impl","G__49667","cljs.core/map?","cljs.core/contains?","G__49679","p__49683","map__49684","body-index-calculator.validation/empty-value?","p__49687","map__49689","body-index-calculator.validation/validate","visited?","active?","error","error-code","field","cljs.spec.alpha/fspec-impl","cljs.spec.alpha.spec_impl.cljs$core$IFn$_invoke$arity$4","cljs.spec.alpha/cat-impl","body-index-calculator.validation/get-argv","system","locale","utype","units","G__49692","G__49693","body-index-calculator.i18n/tr","body-index-calculator.helpers/loc","conf-vals","body-index-calculator.config/config","argv","p1__49691#","body-index-calculator.helpers/convert-single-value","cljs.core/vec","cljs.core.into.cljs$core$IFn$_invoke$arity$2","p__49694","map__49695","body-index-calculator.validation/localize-error-code","path","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","G__49697","G__49698","G__49699","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","opts49703","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","ret__47570__auto__","p__49704","vec__49706","___47571__auto__","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","f__47572__auto__","sym__47573__auto__","G__49710","cljs.spec.test.alpha/distinct-by","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","p1__47569__47574__auto__","G__49712","fexpr__49711","cljs.spec.test.alpha.instrumentable_syms.cljs$core$IFn$_invoke$arity$1","cljs.core/zipmap","checked__47536__auto__","G__49729","G__49730","G__49731","fexpr__49728","cljs.spec.test.alpha/instrument-1*"],"sourcesContent":["(ns body-index-calculator.validation\n  (:require\n   [cljs.spec.alpha :as s]\n   [cljs.spec.test.alpha :as ts]\n   [body-index-calculator.i18n :refer [tr]]\n   [body-index-calculator.lib.specs :as specs]\n   [body-index-calculator.config :refer [config]]\n   [body-index-calculator.helpers :refer [loc convert-single-value]]))\n\n(def rules {:age    {:as-you-type [::specs/number ::specs/age-lt]\n                     :finaly      [::specs/age-gt]}\n            :weight {:as-you-type [::specs/number ::specs/weight-lt]\n                     :finaly      [::specs/weight-gt]}\n            :height {:as-you-type [::specs/number ::specs/height-lt]\n                     :finaly      [::specs/height-gt]}\n            :waist  {:as-you-type [::specs/number ::specs/waist-lt]\n                     :finaly      [::specs/waist-gt]}\n            :hip    {:as-you-type [::specs/number ::specs/hip-lt]\n                     :finaly      [::specs/hip-gt]}})\n\n(defn fail-spec\n  [spec value]\n  (->> (s/explain-data spec value)\n       :cljs.spec.alpha/problems\n       (map :via)\n       distinct\n       last\n       (mapv (comp keyword name))))\n\n(defn get-rules [select name]\n  (if (= :all select)\n    (apply concat (vals (-> rules name)))\n    (-> rules name select)))\n(comment\n  (get-rules :all :age)\n  (get-rules :as-you-type :age)\n  (get-rules :finaly :age))\n\n(defn apply-rules [rules value]\n  (->> rules\n       (map #(fail-spec % value))\n       (remove empty?)\n       (first)))\n(comment\n  (apply-rules (get-rules :all :age)\n               {:value \"33\"})\n  (apply-rules (get-rules :all :age)\n               {:value \"222.a\"})\n  (apply-rules (get-rules :as-you-type :age)\n               {:value \"11.a\"}))\n\n(defn valid []\n  {:error false\n   :error-code nil})\n\n(defn invalid [fails]\n  {:error true\n   :error-code fails})\n\n(defn validate-with-rules [select {:keys [value name]}]\n  (if-let [fails (apply-rules (get-rules select name) value)]\n    (invalid fails)\n    (valid)))\n\n(s/def ::error boolean?)\n(s/def ::active? boolean?)\n(s/def ::visited? boolean?)\n(s/def ::name keyword?)\n(s/def ::value (s/nilable any?))\n(s/def ::error-code (s/nilable (s/coll-of keyword?)))\n(s/def ::field (s/keys :req-un [::visited? ::active? ::name ::value]\n                       :opt-un [::error ::error-code]))\n(s/def ::validation-error (s/keys :req-un [::error ::error-code]))\n\n(defn empty-value? [{:keys [value]}]\n  (empty? value))\n\n(defn validate\n  [{:keys [visited? active? error error-code] :as field}]\n  (cond\n    (false? visited?)    (valid)\n    (empty-value? field) (valid)\n    (or (false? active?)\n        (true? error))  (validate-with-rules :all field)\n\n    (and  (true? active?)\n          (false? error)) (validate-with-rules :as-you-type field)\n    :else                 {:error error\n                           :error-code error-code}))\n\n(s/fdef validate\n  :args (s/cat :field ::field)\n  :ret  ::validation-error)\n\n(defn get-argv [system locale name utype]\n  (let [units     (tr [locale] (loc [:units system :long utype]))\n        conf-vals (vals (get config name))\n        argv      (if (= :imperial system)\n                    (mapv #(convert-single-value system utype %) conf-vals)\n                    (vec conf-vals))]\n    (into argv [units])))\n\n(defn localize-error-code [system locale {:keys [name error-code utype]}]\n  (if error-code\n    (let [path (into [] (concat [:validation name system] error-code))\n          argv (get-argv system locale name utype)]\n      {:error-text (tr [locale] (conj (loc path) \"Incorrect input\") argv)})\n    {:error-text nil}))\n\n(ts/instrument 'validate)\n"]}