{"version":3,"sources":["body_index_calculator/lib/basal_matabolic_rate.cljs"],"mappings":";;;;;AAMA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAgB,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAAA;AAAA,AAAA,AAAAE,AAAAF,AAAA;AAAA,AAAAA;AAAA,AAAA,AAAAE,AAAAF,AAAA;AAAA,AAAAA;AAAA,AAAA,AAAAE,AAAAF,AAAA;AAAA,AAAAA;AAAA,AAAA,AAAAE,AAAAF,AAAA;AAAA,AAAAA;AAAA,AAAA,AAAA,AAAAC,AAAAD,AAAA,AAAAE,AAAAF,AAAA,AAAA,AAAAE,AAAAF,AAAA,AAAA,AAAAE,AAAAF,AAAA,AAAA,AAAAE,AAAAF,AAAA;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAKhB,AAAA,AAAAG,AAAMM;AAAN,AAAA,AAAAL,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AACWM;AADX,AAAAF,AAAAJ,AAAA,AACkBO;AADlB,AAAAH,AAAAJ,AAAA,AACsBQ;AADtB,AAAAJ,AAAAJ,AAAA,AAC6BS;AAD7B,AAEE,AAAMC,AAAU,AAAA,AAAA,AAAI,AAAA,AAACC,AAAQL;AAA7B,AACE,AAAK,AAAAM,AACC,AAAG,AAAA,AAAG,AAAA,AAAGJ,AACH,AAAA,AAAGC,AACHC,AACH,AAAA,AAAGH;AAJP,AAAA,AAAAK,AAACC;AAAN;;AAMJ,AAAA,AAAMC,AACHC;AADH,AAEE,AAAMC,AAAe,AAACC,AAAAA,AAAAA,AAAoBF,AAAAA;AAA1C,AACE,AAAA,AAAO,AAAA,AAAQC","names":["cljs.spec.alpha/def-impl","cljs.spec.alpha/map-spec-impl","G__49751","cljs.core/map?","cljs.core/contains?","p__49753","map__49754","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","body-index-calculator.lib.basal-matabolic-rate/mifflin-jeor","gender","age","weight","height","gender-kf","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","G__49756","Math/floor","body-index-calculator.lib.basal-matabolic-rate/katch-macardle","person","lean-body-mass","body-index-calculator.lib.lean-body-mass/calc-lean-body-mass"],"sourcesContent":["(ns body-index-calculator.lib.basal-matabolic-rate\n  (:require\n   [body-index-calculator.lib.specs :as specs]\n   [cljs.spec.alpha :as s]\n   [body-index-calculator.lib.lean-body-mass :refer [calc-lean-body-mass]]))\n\n(s/def ::person (s/keys :req-un [::specs/height\n                                 ::specs/weight\n                                 ::specs/age\n                                 ::specs/gender]))\n\n(defn mifflin-jeor\n  [{:keys [gender age weight height]}]\n  (let [gender-kf (if (= :male gender) 5 -161)]\n    (int (Math/floor\n          (- (+ (* weight 10)\n                (* height 6.25)\n                gender-kf)\n             (* age 5))))))\n\n(defn katch-macardle\n  [person]\n  (let [lean-body-mass (calc-lean-body-mass person)]\n    (+ 370 (* 21.6 lean-body-mass))))\n"]}