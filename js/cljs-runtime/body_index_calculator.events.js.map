{"version":3,"sources":["body_index_calculator/events.cljs"],"mappings":"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","names":["body-index-calculator.events/*trace-events*","body-index-calculator.events/check-and-throw","a-spec","db","cljs.spec.alpha.valid_QMARK_.cljs$core$IFn$_invoke$arity$2","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","cljs.spec.alpha/explain-str","body-index-calculator.events/check-spec-after-interceptor","G__50021","re-frame.core/after","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","body-index-calculator.events/common-interseptors","re-frame.core/debug","re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2","_","body-index-calculator.db/default-db-with-values","p__50022","vec__50023","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","new-theme","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","p__50026","vec__50027","new-locale","p__50031","vec__50032","new-system","p1__50030#","cljs.core.update.cljs$core$IFn$_invoke$arity$3","body-index-calculator.helpers/convert-form-values","body-index-calculator.events/cond-field->metric","system","field","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","body-index-calculator.helpers/convert-field-value","seq__50035","cljs.core/seq","chunk__50036","count__50037","i__50038","temp__5735__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","ev-name","path","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","cljs.core/name","re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$3","p__50053","p__50054","map__50055","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","vec__50056","p__50063","p__50064","map__50065","vec__50066","form-field","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","db-field","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","errors","body-index-calculator.validation/validate","js/body-index-calculator","js/body-index-calculator.events","js/body-index-calculator.events.timeouts","body-index-calculator.events/timeouts","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","G__50075","G__50076","re-frame.core/reg-fx","p__50077","map__50078","id","event","time","temp__5739__auto__","existing","cljs.core/deref","js/clearTimeout","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/dissoc","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","js/setTimeout","re-frame.core/dispatch"],"sourcesContent":["(ns body-index-calculator.events\n  (:require\n   [cljs.spec.alpha :as s]\n   [reagent.core :as r]\n   [re-frame.core :as rf]\n   [body-index-calculator.validation :as validation]\n   [body-index-calculator.helpers :as helpers]\n   [body-index-calculator.db :as db]))\n\n(def ^:dynamic *trace-events* false)\n\n(defn check-and-throw\n  \"Throws an exception if `db` doesn't match the Spec `a-spec`.\"\n  [a-spec db]\n  (when-not (s/valid? a-spec db)\n    (throw (ex-info (str \"spec check failed: \" (s/explain-str a-spec db)) {}))))\n\n(def check-spec-after-interceptor (rf/after (partial check-and-throw ::db/db)))\n(def common-interseptors (if *trace-events*\n                           [rf/debug\n                            check-spec-after-interceptor]\n                           [check-spec-after-interceptor]))\n\n(rf/reg-event-db\n ::init\n (fn [_ _] db/default-db-with-values))\n\n(rf/reg-event-db\n ::theme\n (fn [db [_ new-theme]]\n   (assoc db :theme new-theme)))\n\n(rf/reg-event-db\n ::locale\n (fn [db [_ new-locale]]\n   (assoc db :locale new-locale)))\n\n(rf/reg-event-db\n ::system\n (fn [db [_ new-system]]\n   (-> db\n       (assoc :system new-system)\n       (update :form\n               #(helpers/convert-form-values new-system %)))))\n\n(defn cond-field->metric [system field]\n  (if (= :imperial system) (helpers/convert-field-value :metric field) field))\n\n(doseq [ev-name [::gender ::age\n                 ::weight ::height\n                 ::waist  ::hip]]\n  (let [path [:form (keyword (name ev-name))]]\n    (rf/reg-event-db\n     ev-name\n     common-interseptors\n     (fn [{:keys [system] :as db} [_ form-field]]\n       (update-in db path\n                  (fn [db-field]\n                    (let [field  (merge db-field form-field)\n                          errors (validation/validate (cond-field->metric system field))]\n                      (merge field errors))))))))\n\n(defonce timeouts (r/atom {}))\n\n(rf/reg-fx\n :timeout\n (fn [{:keys [id event time]}]\n   (when-some [existing (get @timeouts id)]\n     (js/clearTimeout existing)\n     (swap! timeouts dissoc id))\n   (when (some? event)\n     (swap! timeouts assoc id\n            (js/setTimeout\n             (fn []\n               (rf/dispatch event))\n             time)))))\n"]}