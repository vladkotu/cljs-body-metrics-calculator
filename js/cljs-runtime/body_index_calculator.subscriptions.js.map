{"version":3,"sources":["body_index_calculator/subscriptions.cljs"],"mappings":"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","names":["body-index-calculator.subscriptions/cider-have-to-have-at-least-one-def-in-a-file","seq__49767","cljs.core/seq","chunk__49772","count__49773","i__49774","seq__49775","chunk__49776","count__49777","i__49778","temp__5735__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","seq__49768","chunk__49769","count__49770","i__49771","sub-name","a-key","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","cljs.core/name","G__49799","G__49800","G__49801","G__49802","G__49807","G__49808","G__49809","G__49810","re-frame.core/reg-sub","db","_","cljs.core.get.cljs$core$IFn$_invoke$arity$2","seq__49811","chunk__49812","count__49813","i__49814","G__49840","G__49841","G__49842","G__49843","G__49844","G__49845","G__49846","G__49847","G__49852","G__49853","G__49854","G__49855","G__49856","G__49857","G__49858","G__49859","p__49848","vec__49849","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","p__49860","vec__49861","system","locale","form","field","errors","body-index-calculator.validation/validate","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","body-index-calculator.helpers/convert-field-value","error-text","body-index-calculator.validation/localize-error-code","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","p__49864","map__49865","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","body-index-calculator.subscriptions/form-metric->result","spec","value","conclusion","metric","e49867","person","body-index-calculator.helpers/form->person","valid?","cljs.spec.alpha.valid_QMARK_.cljs$core$IFn$_invoke$arity$2","a-value","a-conclusion","and__4120__auto__","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","js/Object","e","cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic","body-index-calculator.lib.body-mass-index/calc-body-mass-index","body-index-calculator.lib.body-mass-index/classify-body-mass-person","body-index-calculator.lib.body-shape-index/calc-body-shape-z-score","body-index-calculator.lib.body-shape-index/classify-body-shape-person","body-index-calculator.lib.basal-matabolic-rate/mifflin-jeor","body-index-calculator.lib.lean-body-mass/calc-lean-body-mass","body-index-calculator.lib.body-fat/calc-body-fat","body-index-calculator.lib.body-fat/classify-fat-percentage-person","body-index-calculator.lib.wais-hip-ratio/calc-waist-hip-ratio","body-index-calculator.lib.wais-hip-ratio/classify-waist-hip-ratio","body-index-calculator.subscriptions/metrics","G__49873","G__49874","G__49875","G__49876","G__49877","G__49878","p__49879","vec__49880","converted-form","body-index-calculator.helpers/convert-form-values","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.partial.cljs$core$IFn$_invoke$arity$2"],"sourcesContent":["(ns body-index-calculator.subscriptions\n  (:require\n   [re-frame.core :as rf]\n   [cljs.spec.alpha :as s]\n   [body-index-calculator.validation :refer [validate localize-error-code]]\n   [body-index-calculator.helpers :as helpers]\n   [body-index-calculator.lib.body-fat :as bfp]\n   [body-index-calculator.lib.body-mass-index :as bmi]\n   [body-index-calculator.lib.wais-hip-ratio :as whr]\n   [body-index-calculator.lib.basal-matabolic-rate :as bmr]\n   [body-index-calculator.lib.body-shape-index :as bsi]\n   [body-index-calculator.lib.lean-body-mass :as lbm]))\n\n(def cider-have-to-have-at-least-one-def-in-a-file nil)\n\n;; register hight level flat subscriptions\n(doseq [sub-name [::form ::system ::theme ::locale]\n        a-key [(keyword (name sub-name))]]\n  (rf/reg-sub\n   sub-name\n   (fn [db _] (get db a-key))))\n\n;; register every form field as subscription\n(doseq [sub-name [::gender ::age\n                  ::weight ::height\n                  ::waist  ::hip]]\n  (let [a-key  (keyword (name sub-name))]\n    (rf/reg-sub\n     sub-name\n     :<- [::system]\n     :<- [::locale]\n     :<- [::form]\n     (fn [[system locale form] _]\n       (let [field      (get form a-key)\n             errors     (validate (if (= :imperial system)\n                                    (helpers/convert-field-value :metric field)\n                                    field))\n             error-text (localize-error-code system locale (merge field errors))]\n         (merge field errors error-text))))))\n\n(defn form-metric->result\n  [form {:keys [spec value conclusion] :as metric}]\n  (try\n    (let [person (helpers/form->person form)\n          valid? (s/valid? spec person)\n          a-value (if valid? (value person) nil)\n          a-conclusion (if valid? (and conclusion (conclusion person)) nil)]\n      (-> metric\n          (assoc :value a-value)\n          (assoc :conclusion a-conclusion)))\n    (catch js/Object e\n      (prn e))))\n\n(def metrics\n  [{:a-key      ::bmi\n    :spec       ::bmi/person\n    :value      #'bmi/calc-body-mass-index\n    :conclusion #'bmi/classify-body-mass-person\n    :abbr       \"BMI\"\n    :title      \"Body Mass Index\"\n    :units      [:span \"kg\u00b7m\" [:sup -2]]}\n\n   {:a-key      ::bsi\n    :spec       ::bsi/person\n    :value      #'bsi/calc-body-shape-z-score\n    :conclusion #'bsi/classify-body-shape-person\n    :title      \"A Body Shape Index\"\n    :abbr       \"ABSI\"\n    :units      [:span \"m\" [:sup \"11/6\"] \"kg\" [:sup \"-2/3\"]]}\n\n   {:a-key      ::bmr\n    :spec       ::bmr/person\n    :value      #'bmr/mifflin-jeor\n    :conclusion nil\n    :title      \"Basal Metabolic Rate [Mefflin St Jeor]\"\n    :abbr       \"BMR\"\n    :units      [:span \"kcal/day\"]}\n\n   {:a-key      ::lbm\n    :spec       ::lbm/person\n    :value      #'lbm/calc-lean-body-mass\n    :conslusion nil\n    :title      \"Lean Body Mass\"\n    :abbr       \"LBM\"\n    :units      [:span \"kg\"]}\n\n   {:a-key      ::bfp\n    :spec       ::bfp/person\n    :value      #'bfp/calc-body-fat\n    :conclusion #'bfp/classify-fat-percentage-person\n    :title      \"Body Fat Percentage\"\n    :abbr       \"BF\"\n    :units      [:span \"%\"]}\n\n   {:a-key      ::whr\n    :spec       ::whr/person\n    :value      #'whr/calc-waist-hip-ratio\n    :conclusion #'whr/classify-waist-hip-ratio\n    :title      \"Waist to Hip Ratio\"\n    :abbr       \"WHR\"\n    :units      [:span \"\"]}])\n\n(rf/reg-sub\n ::result\n :<- [::system]\n :<- [::form]\n (fn [[system form] _]\n   (let [converted-form (if (= :imperial system)\n                          (helpers/convert-form-values :metric form)\n                          form)]\n     (map (partial form-metric->result converted-form)\n          metrics))))\n"]}