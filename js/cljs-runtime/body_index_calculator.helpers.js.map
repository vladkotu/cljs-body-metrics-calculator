{"version":3,"sources":["body_index_calculator/helpers.cljs"],"mappings":"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","names":["var_args","G__47660","body-index-calculator.helpers/to-clj","js/Error","x","body_index_calculator.helpers.to_clj.cljs$core$IFn$_invoke$arity$2","opts","cljs.core/boolean?","cljs.core/array?","cljs.core.into.cljs$core$IFn$_invoke$arity$3","p1__47650#","cljs.core.map.cljs$core$IFn$_invoke$arity$1","cljs.core.array_seq.cljs$core$IFn$_invoke$arity$1","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","result","key","value","goog.object/get","key-fn","cljs.core.get.cljs$core$IFn$_invoke$arity$3","cljs.core/keyword","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","G__47700","goog.object/getKeys","body-index-calculator.helpers/read-str","str","js/JSON.parse","body-index-calculator.helpers/write-str","obj","cljs.core/clj->js","js/JSON.stringify","body-index-calculator.helpers/with-styles","styles","body-comp","hoc","G__47712","js/module$node_modules$$material_ui$core$styles$index.withStyles","cljs.core/fn?","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","theme","G__47718","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1","js->clj-wrapper","p__47722","map__47727","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","children","props","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","G__47743","reagent.core/reactify-component","reagent.core/adapt-react-class","body-index-calculator.helpers/with-styles-react","react-comp","G__47746","body-index-calculator.helpers/evalue","ev","body-index-calculator.helpers/str->num","v","js/parseFloat","G__47751","body-index-calculator.helpers/as-float","n","body_index_calculator.helpers.as_float.cljs$core$IFn$_invoke$arity$2","m","body-index-calculator.helpers/to-fixed","body-index-calculator.helpers/as-int","Math/round","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","body-index-calculator.helpers/react-key","seq47768","self__4718__auto__","cljs.core/seq","ss","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/str","clojure.string/trim","clojure.string.join.cljs$core$IFn$_invoke$arity$2","G__47788","fexpr__47787","p1__47765#","clojure.string/replace","body-index-calculator.helpers/lb->kg","G__47794","body-index-calculator.helpers/kg->lb","G__47797","body-index-calculator.helpers/cm->ft-in","sm","in","cljs.core/quot","G__47801","cljs.core/rem","body-index-calculator.helpers/ft-in->sm","len","G__47804","cljs.core/first","cljs.core/last","x__4433__auto__","m__4434__auto__","body-index-calculator.helpers/rcast","goog/typeOf","m__4431__auto__","cljs.core/missing-protocol","body-index-calculator.helpers/FormValueRCast","this","goog.object/set","G__47839","G__47840","G__47841","G__47849","G__47850","G__47851","G__47865","G__47866","G__47867","cljs.core/empty?","cljs.core/PersistentVector","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","cljs.core/Keyword","body-index-calculator.helpers/rcast-value-with","with","p1__47875#","cljs.core.update.cljs$core$IFn$_invoke$arity$3","G__47880","body-index-calculator.helpers/convert-field-value","system","field","G__47885","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/identity","body-index-calculator.helpers/convert-single-value","utype","G__47896","p1__47892#","body-index-calculator.helpers/convert-form-values","form","p__47903","vec__47904","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","cljs.core.into.cljs$core$IFn$_invoke$arity$2","body-index-calculator.helpers/form->person","p__47912","vec__47913","map__47916","k","body-index-calculator.helpers/namestr","cljs.core/name","body-index-calculator.helpers/loc","path","agg","val","cljs.core/qualified-keyword?","cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic","cljs.core/namespace","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","cljs.core.keyword.cljs$core$IFn$_invoke$arity$2","cljs.core/butlast"],"sourcesContent":["(ns body-index-calculator.helpers\n  (:require\n   [goog.object  :as gobj]\n   [reagent.core :as r]\n   [clojure.string :refer [replace trim join]]\n   [\"@material-ui/core/styles\" :refer [withStyles]]))\n\n(defn to-clj\n  \"simplified js->clj for JSON data, :key-fn default to keyword\"\n  ([x] (to-clj x {}))\n  ([x opts]\n   (cond\n     (nil? x)\n     x\n\n     (number? x)\n     x\n\n     (string? x)\n     x\n\n     (boolean? x)\n     x\n\n     (array? x)\n     (into [] (map #(to-clj % opts)) (array-seq x))\n\n     :else ;; object\n     (reduce\n      (fn [result key]\n        (let [value\n              (gobj/get x key)\n\n              key-fn\n              (get opts :key-fn keyword)]\n\n          (assoc result (key-fn (to-clj key opts)) (to-clj value opts))))\n      {}\n      (gobj/getKeys x)))))\n\n(defn read-str [str opts]\n  (to-clj (js/JSON.parse str) opts))\n\n(defn write-str [obj]\n  (-> (clj->js obj)\n      (js/JSON.stringify)))\n\n(defn with-styles\n  \" With-styles wraps `@material-ui.styles/withStyles` HoC\n  so that it is easier and convenient to use for reagent components.\n  API differences:\n  'withStyles(styles)(HoC);'\n  '(with-styles styles hoc)'\n  `styles` should be cljs object with proper JSS rules in or function if you want to operate with `theme` object\n  `body-comp` reagent component\n  Usage example:\n  `[:div\n    [(with-styles\n      {:content\n      {:background\n        \\\"linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)\\\"}}\n      [:button \\\"This is button\\\"])]] `\"\n  [styles body-comp]\n  (let [hoc (withStyles (if (fn? styles)\n                          (comp clj->js (fn [theme] (styles (js->clj theme))))\n                          (clj->js styles)))\n        js->clj-wrapper (fn [{:keys [children] :as props}]\n                          [body-comp (js->clj (dissoc props :children)\n                                              :keywordize-keys true)\n                           children])]\n    (->> js->clj-wrapper\n         r/reactify-component\n         hoc\n         r/adapt-react-class)))\n\n(defn with-styles-react [styles react-comp]\n  (let [hoc (withStyles (clj->js styles))]\n    (hoc react-comp)))\n\n(defn evalue [ev] (-> ev .-target .-value))\n\n(defn str->num [v]\n  (-> v (js/parseFloat 10)))\n\n(defn as-float\n  ([n] (as-float n 2))\n  ([n m] (when (number? n) (js/parseFloat (.toFixed n m)))))\n\n(def to-fixed #'as-float)\n\n(defn as-int\n  [n]\n  (when (number? n)\n    (Math/round n)))\n\n(defn react-key [& ss]\n  (->> ss\n       (map str)\n       (map trim)\n       (join \"-\")\n       (#(replace %  #\"\\s+\" \"-\"))))\n\n(defn lb->kg [m] (Math/round (/ m 0.45359237)))\n(defn kg->lb [m] (Math/round (* m 0.45359237)))\n(defn cm->ft-in [sm]\n  (let [in (/ sm 2.54)]\n    [(quot in 12)\n     (to-fixed (rem in 12))]))\n(defn ft-in->sm [len]\n  (Math/round\n   (+ (* (first len) 30.48)\n      (* (last len) 2.54))))\n\n(defprotocol FormValueRCast\n  (rcast [this]))\n\n(extend-protocol FormValueRCast\n  string           (rcast [this] (if (empty? this) 0 (js/parseFloat  this 10)))\n  number           (rcast [this] (if (zero? this) \"\" (str this)))\n  PersistentVector (rcast [this] (mapv rcast this))\n  nil              (rcast [this] this)\n  Keyword          (rcast [this] this))\n\n(defn rcast-value-with [with this]\n  (update this :value #(-> % rcast with rcast)))\n\n(defn convert-field-value [system field]\n  (case [system (:utype field)]\n    [:metric :len]    (rcast-value-with ft-in->sm field)\n    [:imperial :len]  (rcast-value-with cm->ft-in field)\n    [:metric :mass]   (rcast-value-with kg->lb field)\n    [:imperial :mass] (rcast-value-with lb->kg field)\n    (identity field)))\n\n(defn convert-single-value [system utype value]\n  (case [system utype]\n    [:metric :len]    (-> value rcast ft-in->sm rcast)\n    [:imperial :len]  (map #(if (empty? %) \"0\" %)\n                           (-> value rcast cm->ft-in rcast))\n    [:metric :mass]   (-> value rcast kg->lb rcast)\n    [:imperial :mass] (-> value rcast lb->kg rcast)\n    value))\n\n(defn convert-form-values [system form]\n  (->> form\n       (map (fn [[key field]]\n              [key (convert-field-value system field)]))\n       (into {})))\n\n(defn form->person [form]\n  (->> form\n       (map (fn [[k {:keys [value]}]] {k (rcast value)}))\n       (into {})))\n\n(defn namestr [k]\n  (-> k name str))\n\n(defn loc [path]\n  (let [path (reduce\n              (fn [agg val]\n                (cond\n                  (qualified-keyword? val)\n                  (conj agg (-> val namespace namestr) (-> val name namestr))\n\n                  (keyword? val)\n                  (conj agg (-> val namestr))\n\n                  (string? val)\n                  (conj agg val)\n\n                  (nil? val)\n                  agg\n\n                  :else\n                  (throw (ex-info \"keywords of strings allowed only in `loc` function\" {}))))\n              [] path)]\n    [(keyword (join \".\" (butlast path))\n              (last path))]))\n"]}