{
"version":3,
"file":"module$node_modules$$material_ui$core$utils$reactHelpers.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,yDAAA,CAA6E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAmBrHC,QAASA,OAAM,CAACC,GAAD,CAAMC,KAAN,CAAa,CACP,UAAnB,GAAI,MAAOD,IAAX,CACEA,GAAA,CAAIC,KAAJ,CADF,CAEWD,GAFX,GAGEA,GAAAE,QAHF,CAGgBD,KAHhB,CAD0B,CAhBxBE,MAAAA,CAAyBP,OAAA,CAAQ,kEAAR,CAE7BQ,OAAAC,eAAA,CAAsBP,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAAQ,aAAA,CAMAA,QAAqB,CAACC,OAAD,CAAUC,QAAV,CAAoB,CACvC,MAAOC,OAAAC,QAAAC,eAAA,CAA8BJ,OAA9B,CAAP,EAA6F,EAA7F,GAAiDC,QAAAI,QAAA,CAAiBL,OAAAM,KAAAC,QAAjB,CADV,CALzChB,QAAAC,OAAA,CAAiBA,MACjBD,QAAAiB,WAAA;AAiBAA,QAAmB,CAACC,IAAD,CAAOC,IAAP,CAAa,CAM9B,MAAOR,OAAAC,QAAAQ,QAAA,CAAuB,QAAS,EAAG,CACxC,MAAY,KAAZ,EAAIF,IAAJ,EAA4B,IAA5B,EAAoBC,IAApB,CACS,IADT,CAIO,QAAS,CAACE,QAAD,CAAW,CACzBpB,MAAA,CAAOiB,IAAP,CAAaG,QAAb,CACApB,OAAA,CAAOkB,IAAP,CAAaE,QAAb,CAFyB,CALa,CAAnC,CASJ,CAACH,IAAD,CAAOC,IAAP,CATI,CANuB,CAfhC,KAAIR,OAASN,MAAA,CAAuBP,OAAA,CAAQ,iCAAR,CAAvB,CAZwG;",
"sources":["node_modules/@material-ui/core/utils/reactHelpers.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$material_ui$core$utils$reactHelpers\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isMuiElement = isMuiElement;\nexports.setRef = setRef;\nexports.useForkRef = useForkRef;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nfunction isMuiElement(element, muiNames) {\n  return _react.default.isValidElement(element) && muiNames.indexOf(element.type.muiName) !== -1;\n} // TODO: Make it private only in v5\n\n\nfunction setRef(ref, value) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref) {\n    ref.current = value;\n  }\n}\n\nfunction useForkRef(refA, refB) {\n  /**\n   * This will create a new function if the ref props change and are defined.\n   * This means react will call the old forkRef with `null` and the new forkRef\n   * with the ref. Cleanup naturally emerges from this behavior\n   */\n  return _react.default.useMemo(function () {\n    if (refA == null && refB == null) {\n      return null;\n    }\n\n    return function (refValue) {\n      setRef(refA, refValue);\n      setRef(refB, refValue);\n    };\n  }, [refA, refB]);\n}\n};"],
"names":["shadow$provide","global","require","module","exports","setRef","ref","value","current","_interopRequireDefault","Object","defineProperty","isMuiElement","element","muiNames","_react","default","isValidElement","indexOf","type","muiName","useForkRef","refA","refB","useMemo","refValue"]
}
