{"version":3,"sources":["body_index_calculator/lib/specs.cljs"],"mappings":";;;;;AAMA,AAAA,AAAMA,AAAOC,AAAWC,AAAMC;AAA9B,AACE,AAAMC,AAAU,AAAAC,AAAA,AAAIC,AAAAA,AAAOJ,AAAAA,AAAAA;AAAX,AAAA,AAAAG,AAAAA,AAAiBF,AAAAA,AAAAA;;AAAjC,AACE;AAAKI;AAAL,AACE,AAAAC,AACC,AAACE,AAAMH;AADRE,AAECL;AAFD,AAAA,AAAAI,AAAAC,AAAAD,AAAAC,AAACR,AAAAA,AAAAA;;;;AAIP,AAAAU,AAAA,AAAA,AAAA,AAAA,AAAmB,AAAAC,AAAA,AAAA,AACC,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAcC,AACA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAOC;AAAP,AAAgB,AAACC,AAAI,AAAA,AAAAF,AAACG;AAFrC,AACC,AACc;AAElC,AAAAR,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AACA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAmB,AAAA,AAAA,AAACX,AAAMoB;AAC1B,AAAAT,AAAA,AAAA,AAAA,AAAA,AAAmB,AAAA,AAAA,AAACX,AAAMqB;AAC1B,AAAAV,AAAA,AAAA,AAAA,AAAA,AAAmB,AAAA,AAAA,AAACX,AAAMoB;AAC1B,AAAAT,AAAA,AAAA,AAAA,AAAA,AAAmB,AAAA,AAAA,AAACX,AAAMqB;AAC1B,AAAAV,AAAA,AAAA,AAAA,AAAA,AAAmB,AAAA,AAAA,AAACX,AAAMoB;AAC1B,AAAAT,AAAA,AAAA,AAAA,AAAA,AAAmB,AAAA,AAAA,AAACX,AAAMqB;AAC1B,AAAAV,AAAA,AAAA,AAAA,AAAA,AAAmB,AAAA,AAAA,AAACX,AAAMoB;AAC1B,AAAAT,AAAA,AAAA,AAAA,AAAA,AAAmB,AAAA,AAAA,AAACX,AAAMqB;AAC1B,AAAAV,AAAA,AAAA,AAAA,AAAA,AAAmB,AAAA,AAAA,AAACX,AAAMoB;AAC1B,AAAAT,AAAA,AAAA,AAAA,AAAA,AAAmB,AAAA,AAAA,AAACX,AAAMqB;AAE1B,AAAAV,AAAA,AAAA,AAAA,AAAA,AAAmB,AAAAC,AAAA,AAAA,AAAA,AAAWE;AAC9B,AAAAH,AAAA,AAAA,AAAA,AAAA,AAAmB,AAAAI,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AACnB,AAAAJ,AAAA,AAAA,AAAA,AAAA,AAAmB,AAAAI,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AACnB,AAAAJ,AAAA,AAAA,AAAA,AAAA,AAAmB,AAAAI,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AACnB,AAAAJ,AAAA,AAAA,AAAA,AAAA,AAAmB,AAAAI,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AACnB,AAAAJ,AAAA,AAAA,AAAA,AAAA,AAAmB,AAAAI,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA","names":["body-index-calculator.lib.specs/check","comparator","field","key","ref-value","G__67680","body-index-calculator.config/config","value","G__67682","G__67683","body-index-calculator.helpers/rcast","cljs.spec.alpha/def-impl","cljs.spec.alpha/nilable-impl","cljs.spec.alpha/or-spec-impl","cljs.core/int?","cljs.spec.alpha/and-spec-impl","p1__67686#","cljs.core/string?","cljs.core/not","cljs.core/re-find","cljs.core/<","cljs.core/>"],"sourcesContent":["(ns body-index-calculator.lib.specs\n  (:require\n   [cljs.spec.alpha :as s]\n   [body-index-calculator.helpers :refer [rcast]]\n   [body-index-calculator.config :refer [config]]))\n\n(defn check [comparator field key]\n  (let [ref-value (-> config field key)]\n    (fn [value]\n      (comparator\n       (rcast value)\n       ref-value))))\n\n(s/def ::number    (s/nilable\n                    (s/or :number int?\n                          :string (s/and string? #(not (re-find #\"[^0-9.]+\" %))))))\n\n(s/def ::gender    #{:male :female})\n(s/def ::age-lt    (check < :age :max))\n(s/def ::age-gt    (check > :age :min))\n(s/def ::weight-lt (check < :weight :max))\n(s/def ::weight-gt (check > :weight :min))\n(s/def ::height-lt (check < :height :max))\n(s/def ::height-gt (check > :height :min))\n(s/def ::waist-gt  (check < :waist :max))\n(s/def ::waist-lt  (check > :waist :min))\n(s/def ::hip-gt    (check < :hip :max))\n(s/def ::hip-lt    (check > :hip :min))\n\n(s/def ::int       (s/nilable int?))\n(s/def ::age       (s/and ::int ::age-lt ::age-gt))\n(s/def ::weight    (s/and ::int ::weight-lt ::weight-gt))\n(s/def ::height    (s/and ::int ::height-lt ::height-gt))\n(s/def ::waist     (s/and ::int ::waist-lt ::waist-gt))\n(s/def ::hip       (s/and ::int ::hip-lt ::hip-gt))\n"]}