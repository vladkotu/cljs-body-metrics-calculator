(ns body-index-calculator.lib.body-shape-index
  (:require
   [cljs.spec.alpha :as s]
   [body-index-calculator.lib.specs :as specs]
   [body-index-calculator.lib.lib :as lib]
   [body-index-calculator.lib.body-mass-index  :refer [calc-body-mass-index]]))

(s/def ::person (s/keys :req-un [::specs/height
                                 ::specs/weight
                                 ::specs/age
                                 ::specs/gender
                                 ::specs/waist]))

(defn calc-body-shape [{:keys [waist height] :as person}]
  (let [bmi (calc-body-mass-index person)]
    (/ (/ waist 100)
       (* (Math/pow bmi (/ 2 3))
          (Math/pow (/ height 100) (/ 1 2))))))

(def tpetson {:weight 81
              :height 179
              :age 37
              :waist 80
              :gender :male})

(def male-age-bsi
  "Age| mean | standard deviation"
  [[2	0.07778	0.00312] [3	0.07931	0.00283] [4	0.07932	0.00300] [5	0.08009	0.00335] [6	0.07989	0.00362] [7	0.07968	0.00341] [8	0.08063	0.00415] [9	0.08025	0.00423] [10	0.07969	0.00408] [11	0.07964	0.00442] [12	0.07953	0.00438] [13	0.07807	0.00434] [14	0.07712	0.00436] [15	0.07647	0.00415] [16	0.07583	0.00379] [17	0.07625	0.00376] [18	0.07665	0.00361] [19	0.07665	0.00393] [20	0.07715	0.00410] [21	0.07754	0.00370] [22	0.07861	0.00452] [23	0.07839	0.00364] [24	0.07794	0.00363] [25	0.07880	0.00354] [26	0.07895	0.00381] [27	0.07936	0.00402] [28	0.07999	0.00387] [29	0.07944	0.00381] [30	0.07949	0.00370] [31	0.07890	0.00317] [32	0.07922	0.00374] [33	0.08010	0.00408] [34	0.07977	0.00367] [35	0.08039	0.00358] [36	0.07966	0.00397] [37	0.07999	0.00381] [38	0.08031	0.00367] [39	0.08114	0.00363] [40	0.08089	0.00354] [41	0.08127	0.00335] [42	0.08122	0.00347] [43	0.08084	0.00339] [44	0.08110	0.00327] [45	0.08140	0.00332] [46	0.08272	0.00426] [47	0.08176	0.00306] [48	0.08119	0.00323] [49	0.08272	0.00400] [50	0.08322	0.00333] [51	0.08261	0.00385] [52	0.08281	0.00360] [53	0.08272	0.00399] [54	0.08324	0.00356] [55	0.08388	0.00406] [56	0.08321	0.00386] [57	0.08529	0.00393] [58	0.08374	0.00344] [59	0.08343	0.00354] [60	0.08392	0.00354] [61	0.08487	0.00354] [62	0.08455	0.00348] [63	0.08513	0.00352] [64	0.08489	0.00275] [65	0.08547	0.00343] [66	0.08583	0.00343] [67	0.08518	0.00324] [68	0.08565	0.00298] [69	0.08633	0.00382] [70	0.08534	0.00387] [71	0.08603	0.00356] [72	0.08635	0.00364] [73	0.08605	0.00325] [74	0.08648	0.00387] [75	0.08713	0.00363] [76	0.08671	0.00313] [77	0.08691	0.00348] [78	0.08592	0.00383] [79	0.08745	0.00361] [80	0.08759	0.00384] [81	0.08714	0.00395] [82	0.08713	0.00370] [83	0.08714	0.00342] [84	0.08763	0.00385] [85	0.08811	0.00356]])

(def female-age-bsi [[2	0.07922	0.0031] [3	0.08000	0.0030] [4	0.08045	0.0028] [5	0.08085	0.0032] [6	0.08006	0.0033] [7	0.08013	0.0033] [8	0.08039	0.0038] [9	0.08016	0.0037] [10	0.07914	0.0037] [11	0.07934	0.0040] [12	0.07825	0.0040] [13	0.07807	0.0043] [14	0.07762	0.0044] [15	0.07701	0.0039] [16	0.07739	0.0039] [17	0.07714	0.0039] [18	0.07705	0.0041] [19	0.07743	0.0041] [20	0.07712	0.0046] [21	0.07786	0.0041] [22	0.07728	0.0043] [23	0.07726	0.0046] [24	0.07771	0.0049] [25	0.07699	0.0040] [26	0.07719	0.0054] [27	0.07756	0.0045] [28	0.07772	0.0046] [29	0.07744	0.0040] [30	0.07703	0.0042] [31	0.07714	0.0047] [32	0.07738	0.0048] [33	0.07786	0.0047] [34	0.07779	0.0045] [35	0.07756	0.0045] [36	0.07854	0.0042] [37	0.07815	0.0039] [38	0.07861	0.0050] [39	0.07779	0.0048] [40	0.07790	0.0046] [41	0.07892	0.0040] [42	0.07833	0.0046] [43	0.07882	0.0049] [44	0.07774	0.0049] [45	0.07860	0.0046] [46	0.07900	0.0038] [47	0.07916	0.0047] [48	0.07888	0.0054] [49	0.07978	0.0046] [50	0.07894	0.0050] [51	0.08039	0.0043] [52	0.08068	0.0047] [53	0.07941	0.0042] [54	0.08054	0.0054] [55	0.07872	0.0049] [56	0.08000	0.0056] [57	0.08025	0.0050] [58	0.08204	0.0049] [59	0.08038	0.0048] [60	0.08094	0.0051] [61	0.08183	0.0047] [62	0.08146	0.0044] [63	0.08226	0.0047] [64	0.08120	0.0055] [65	0.08148	0.0060] [66	0.08148	0.0056] [67	0.08283	0.0048] [68	0.08228	0.0054] [69	0.08209	0.0052] [70	0.08316	0.0048] [71	0.08394	0.0050] [72	0.08246	0.0056] [73	0.08495	0.0049] [74	0.08342	0.0044] [75	0.08276	0.0044] [76	0.08464	0.0050] [77	0.08539	0.0050] [78	0.08332	0.0061] [79	0.08376	0.0058] [80	0.08543	0.0059] [81	0.08406	0.0056] [82	0.08355	0.0064] [83	0.08542	0.0061] [84	0.08407	0.0048] [85	0.08533	0.0052]])

(def absi-z-score-ranges {:male male-age-bsi
                          :female female-age-bsi})

(def absi-mortality-zones
  [[-100    -0.868 "Very Low"]
   [-0.868  -0.272 "Low"]
   [-0.272  0.229  "Average"]
   [0.229   0.798  "High"]
   [0.798   100    "Very High"]])

(defn calc-body-shape-z-score
  [{:keys [age gender] :as person}]
  (let [absi (calc-body-shape person)
        scores (get absi-z-score-ranges gender)
        [_ absi-mean absi-sd] (first (filter #(= age (first %)) scores))]
    (/ (- absi absi-mean)
       absi-sd)))

(defn classify-body-shape-person
  [person]
  (->> person
       calc-body-shape-z-score
       (#(lib/classify-value-by-table-ranges
          absi-mortality-zones
          %))))
